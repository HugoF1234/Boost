from flask import Flask, redirect, request, session, url_for, render_template, make_response, jsonify, send_from_directory, flash
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
from sqlalchemy import inspect
from urllib.parse import urlencode
from datetime import datetime
from sqlalchemy import text
import requests
import os
import google.generativeai as genai
import logging
from datetime import datetime, timedelta
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps
import re
from datetime import datetime, timedelta
# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -----------------------
# CONFIGURATION APP
# -----------------------
app = Flask(__name__, static_folder='static')

# Ajoute ce code dans ton fichier app.py, apr√®s la cr√©ation de l'app Flask

@app.context_processor
def inject_user_profile():
    """Injecte les informations du profil utilisateur dans tous les templates"""
    if 'profile' in session:
        profile = session['profile']
        
        # R√©cup√©rer les informations de l'utilisateur depuis la base de donn√©es
        user = None
        if profile.get('sub'):
            user = User.query.filter_by(sub=profile['sub']).first()
        
        return dict(
            picture=profile.get('picture', ''),
            name=profile.get('name', ''),
            first_name=profile.get('first_name', ''),
            last_name=profile.get('last_name', ''),
            email=profile.get('email', ''),
            language=profile.get('language', ''),
            country=profile.get('country', ''),
            email_verified=profile.get('email_verified', False),
            sub=profile.get('sub', ''),
            secteur=user.secteur if user and user.secteur else '',
            interets=user.interets if user and user.interets else []
        )
    
    return dict(
        picture='',
        name='',
        first_name='',
        last_name='',
        email='',
        language='',
        country='',
        email_verified=False,
        sub='',
        secteur='',
        interets=[]
    )
app.secret_key = os.urandom(24)
app.config['SESSION_COOKIE_NAME'] = 'linkedin_session'

# ‚úÖ CONFIGURATION BASE DE DONN√âES
from urllib.parse import quote_plus

# Utilisation de la cha√Æne de connexion fournie par Render
db_url = os.getenv("DATABASE_URL")
if not db_url:
    # Fallback vers une connexion locale si la variable d'environnement n'est pas d√©finie
    password = quote_plus("Lexia2025")
    db_url = f'postgresql://user3:{password}@localhost:5432/Boostdb'
    logger.info("Utilisation de la base de donn√©es locale")
else:
    # Pour Render, v√©rifier et corriger l'URL si n√©cessaire
    if db_url.startswith("postgres://"):
        db_url = db_url.replace("postgres://", "postgresql://", 1)
    logger.info("Utilisation de la base de donn√©es Render")

app.config['SQLALCHEMY_DATABASE_URI'] = db_url
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

# -----------------------
# MOD√àLES SQLALCHEMY
# -----------------------
class LocalUser(db.Model):
    __tablename__ = 'local_users'
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    first_name = db.Column(db.String(50), nullable=False)
    last_name = db.Column(db.String(50), nullable=False)
    company = db.Column(db.String(120))
    job_title = db.Column(db.String(120))
    is_active = db.Column(db.Boolean, default=True)
    is_verified = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)
    login_attempts = db.Column(db.Integer, default=0)
    locked_until = db.Column(db.DateTime)
    
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)
    
    def is_locked(self):
        if self.locked_until:
            return datetime.utcnow() < self.locked_until
        return False
    
    def lock_account(self, minutes=15):
        self.locked_until = datetime.utcnow() + timedelta(minutes=minutes)
        db.session.commit()
    
    def unlock_account(self):
        self.login_attempts = 0
        self.locked_until = None
        db.session.commit()
    
    @property
    def full_name(self):
        return f"{self.first_name} {self.last_name}"

# Fonctions utilitaires
def is_valid_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def is_strong_password(password):
    """V√©rifier que le mot de passe est suffisamment fort"""
    if len(password) < 8:
        return False, "Le mot de passe doit contenir au moins 8 caract√®res"
    
    if not re.search(r'[A-Z]', password):
        return False, "Le mot de passe doit contenir au moins une majuscule"
    
    if not re.search(r'[a-z]', password):
        return False, "Le mot de passe doit contenir au moins une minuscule"
    
    if not re.search(r'[0-9]', password):
        return False, "Le mot de passe doit contenir au moins un chiffre"
    
    if not re.search(r'[!@#$%^&*(),.?\":{}|<>]', password):
        return False, "Le mot de passe doit contenir au moins un caract√®re sp√©cial"
    
    return True, "Mot de passe valide"

# D√©corateur pour v√©rifier l'authentification
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('signin'))
        return f(*args, **kwargs)
    return decorated_function


class User(db.Model):
    __tablename__ = 'users'  # Nom explicite pour √©viter les conflits avec mot-cl√© SQL
    id = db.Column(db.Integer, primary_key=True)
    sub = db.Column(db.String(128), unique=True, nullable=False)
    email = db.Column(db.String(120))
    name = db.Column(db.String(120))
    first_name = db.Column(db.String(80))
    last_name = db.Column(db.String(80))
    picture = db.Column(db.String(250))
    language = db.Column(db.String(10))
    country = db.Column(db.String(10))
    email_verified = db.Column(db.Boolean, default=False)
    secteur = db.Column(db.String(120))
    interets = db.Column(db.JSON, default=list)  # JSON au lieu de ARRAY
    posts = db.relationship('Post', backref='author', lazy=True)

class Post(db.Model):
    __tablename__ = 'posts'  # Nom explicite de la table
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text)
    published_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)  # R√©f√©rence √† users.id
    scheduled = db.Column(db.Boolean, default=False)
    linkedin_post_urn = db.Column(db.String(100))

# Fonction d'initialisation de la base de donn√©es
def create_default_admin():
    """Cr√©er un utilisateur admin par d√©faut sur Render"""
    try:
        # V√©rifier si un admin existe d√©j√†
        admin_user = LocalUser.query.filter_by(email="admin@linkedboost.com").first()
        
        if not admin_user:
            admin_user = LocalUser(
                email="admin@linkedboost.com",
                first_name="Admin",
                last_name="LinkedBoost",
                company="LinkedBoost",
                job_title="Administrateur",
                is_verified=True
            )
            admin_user.set_password("AdminLinkedBoost2025!")
            
            db.session.add(admin_user)
            db.session.commit()
            
            logger.info("‚úÖ Utilisateur admin cr√©√© sur Render")
            logger.info("üìß Email: admin@linkedboost.com")
            logger.info("üîê Password: AdminLinkedBoost2025!")
        else:
            logger.info("‚ÑπÔ∏è Utilisateur admin d√©j√† existant")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de l'admin: {str(e)}")
        

def init_db():
    """Initialiser la base de donn√©es avec les tables n√©cessaires"""
    with app.app_context():
        try:
            # V√©rifier les tables existantes avant la cr√©ation
            inspector = inspect(db.engine)
            existing_tables = inspector.get_table_names()
            logger.info(f"Tables existantes avant cr√©ation: {existing_tables}")
            
            # Cr√©er les tables si elles n'existent pas
            db.create_all()
            logger.info("Tables cr√©√©es ou v√©rifi√©es avec succ√®s")
            
            # üî• NOUVEAU : Cr√©er un utilisateur admin par d√©faut sur Render
            if os.getenv("RENDER"):
                create_default_admin()
            
            # V√©rifier les tables apr√®s cr√©ation
            existing_tables = inspector.get_table_names()
            logger.info(f"Tables existantes apr√®s cr√©ation: {existing_tables}")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'initialisation de la base de donn√©es: {str(e)}")
            raise

# Initialiser la base de donn√©es au d√©marrage
init_db()
# -----------------------
# LINKEDIN + GEMINI
# -----------------------
CLIENT_ID = os.getenv("LINKEDIN_CLIENT_ID", "86occjps58doir")
CLIENT_SECRET = os.getenv("LINKEDIN_CLIENT_SECRET", "WPL_AP1.C8C6uXjTbpJyQUx2.Y7COPg==")
REDIRECT_URI = os.getenv("LINKEDIN_REDIRECT_URI", "https://linkedinboost.onrender.com/callback")

LINKEDIN_AUTH_URL = "https://www.linkedin.com/oauth/v2/authorization"
LINKEDIN_TOKEN_URL = "https://www.linkedin.com/oauth/v2/accessToken"
LINKEDIN_USERINFO_URL = "https://api.linkedin.com/v2/userinfo"
LINKEDIN_ASSET_REGISTRATION_URL = "https://api.linkedin.com/v2/assets?action=registerUpload"
LINKEDIN_POSTS_URL = "https://api.linkedin.com/v2/ugcPosts"

SCOPES = "openid email profile w_member_social"
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyAH-hVzlQJQTCOLB1UsznxrObuY8XIsKMQ")
genai.configure(api_key=GEMINI_API_KEY)
import requests
import re
from datetime import datetime, timedelta

# Ajouter cette configuration pr√®s de vos autres constantes
NEWS_API_KEY = "2cc0499903c24433a7646123cb3a82e0"  # Remplacez par votre vraie cl√©
NEWS_API_URL = "https://newsapi.org/v2/everything"
# -----------------------
# ROUTES FLASK
# -----------------------
PEXELS_API_KEY = os.getenv("PEXELS_API_KEY", "GRfBXoBp4ZxiaHejhH03WWpuSm07btLzWxyBq6Q9dnVFPr6BrJ8xpFlg")  # √Ä remplacer par votre vraie cl√©
PEXELS_API_URL = "https://api.pexels.com/v1"

import json
import os
from datetime import datetime, timedelta

# Cr√©er un dossier cache s'il n'existe pas
cache_dir = os.path.join(os.path.dirname(__file__), 'cache')
if not os.path.exists(cache_dir):
    os.makedirs(cache_dir)

from datetime import datetime
import html
import re
import requests

import tempfile
import os
from urllib.parse import urlparse

def search_pexels_photos(query, per_page=12, page=1):
    """
    Recherche de photos sur Pexels
    
    Args:
        query (str): Terme de recherche
        per_page (int): Nombre de photos par page (max 80)
        page (int): Num√©ro de page
        
    Returns:
        dict: R√©sultats de l'API Pexels ou None en cas d'erreur
    """
    if not PEXELS_API_KEY or PEXELS_API_KEY == "VOTRE_CLE_API_PEXELS":
        logger.warning("Cl√© API Pexels non configur√©e")
        return None
    
    headers = {
        "Authorization": PEXELS_API_KEY
    }
    
    params = {
        "query": query,
        "per_page": min(per_page, 80),  # Limite de l'API
        "page": page,
        "orientation": "landscape"  # Mieux pour LinkedIn
    }
    
    try:
        response = requests.get(f"{PEXELS_API_URL}/search", headers=headers, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            # Formater les r√©sultats pour notre usage
            formatted_photos = []
            for photo in data.get('photos', []):
                formatted_photos.append({
                    'id': photo['id'],
                    'photographer': photo['photographer'],
                    'photographer_url': photo['photographer_url'],
                    'src': {
                        'small': photo['src']['small'],
                        'medium': photo['src']['medium'],
                        'large': photo['src']['large'],
                        'original': photo['src']['original']
                    },
                    'alt': photo['alt'],
                    'url': photo['url']
                })
            
            return {
                'photos': formatted_photos,
                'total_results': data.get('total_results', 0),
                'page': data.get('page', 1),
                'per_page': data.get('per_page', 12),
                'next_page': data.get('next_page', None)
            }
        else:
            logger.error(f"Erreur API Pexels: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"Exception lors de la recherche Pexels: {str(e)}")
        return None
        
def upload_pdf_to_linkedin(pdf_content, access_token, urn):
    """
    Upload un PDF sur LinkedIn en utilisant la nouvelle API Documents
    
    Args:
        pdf_content (bytes): Contenu du PDF
        access_token (str): Token d'acc√®s LinkedIn
        urn (str): URN de l'utilisateur
        
    Returns:
        str: Document URN ou None en cas d'erreur
    """
    try:
        # 1. √âtape 1 : Enregistrer le document pour upload
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json",
            "X-Restli-Protocol-Version": "2.0.0",
            "LinkedIn-Version": "202308"  # Version r√©cente requise pour les documents
        }

        # Payload pour l'enregistrement du document
        register_payload = {
            "initializeUploadRequest": {
                "owner": urn
            }
        }

        # Nouvelle URL pour les documents
        register_url = "https://api.linkedin.com/rest/documents?action=initializeUpload"
        
        logger.info(f"üìÑ Enregistrement du document PDF...")
        reg_resp = requests.post(register_url, headers=headers, json=register_payload)
        
        if reg_resp.status_code != 200:
            logger.error(f"‚ùå Erreur enregistrement PDF: {reg_resp.status_code} - {reg_resp.text}")
            return None

        upload_info = reg_resp.json().get("value", {})
        upload_url = upload_info.get("uploadUrl")
        document_urn = upload_info.get("document")

        if not upload_url or not document_urn:
            logger.error("‚ùå Upload URL ou document URN manquant dans la r√©ponse")
            logger.error(f"R√©ponse compl√®te: {reg_resp.text}")
            return None

        logger.info(f"‚úÖ Document enregistr√©: {document_urn}")
        logger.info(f"üì§ URL d'upload: {upload_url}")

        # 2. √âtape 2 : Upload du contenu PDF
        upload_headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/pdf",
            "LinkedIn-Version": "202308"
        }

        logger.info(f"üì§ Upload du contenu PDF ({len(pdf_content)} bytes)...")
        put_resp = requests.put(upload_url, data=pdf_content, headers=upload_headers)

        if put_resp.status_code not in [200, 201]:
            logger.error(f"‚ùå Erreur upload contenu PDF: {put_resp.status_code} - {put_resp.text}")
            return None

        logger.info(f"‚úÖ PDF upload√© avec succ√®s: {document_urn}")

        # 3. √âtape 3 : V√©rifier le statut du document
        check_url = f"https://api.linkedin.com/rest/documents/{document_urn.replace('urn:li:document:', '')}"
        check_resp = requests.get(check_url, headers=headers)
        
        if check_resp.status_code == 200:
            doc_info = check_resp.json()
            status = doc_info.get("status", "UNKNOWN")
            logger.info(f"üìã Statut du document: {status}")
            
            if status == "AVAILABLE":
                logger.info(f"‚úÖ Document pr√™t pour publication")
                return document_urn
            elif status in ["PROCESSING", "WAITING_UPLOAD"]:
                logger.info(f"‚è≥ Document en cours de traitement, on continue...")
                return document_urn
            else:
                logger.warning(f"‚ö†Ô∏è Statut inattendu du document: {status}")
                return document_urn  # On tente quand m√™me
        
        # Si la v√©rification √©choue, on retourne quand m√™me l'URN
        logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier le statut, on continue avec: {document_urn}")
        return document_urn

    except Exception as e:
        logger.error(f"‚ùå Exception lors de l'upload PDF: {str(e)}")
        return None


# Correction dans la fonction publish - partie PDF
def handle_pdf_upload_in_publish(request, access_token, urn, media_assets, post_data):
    """
    G√®re l'upload PDF dans la fonction publish
    """
    pdf_file = request.files.get("pdf_file")
    if pdf_file and pdf_file.filename.endswith(".pdf"):
        try:
            logger.info(f"üìÑ Traitement du PDF: {pdf_file.filename}")
            pdf_content = pdf_file.read()
            
            # Upload du PDF avec la fonction corrig√©e
            pdf_document_urn = upload_pdf_to_linkedin(pdf_content, access_token, urn)
            
            if pdf_document_urn:
                logger.info(f"‚úÖ PDF upload√© avec succ√®s: {pdf_document_urn}")
                
                # Structure correcte pour un document LinkedIn
                document_media = {
                    "status": "READY",
                    "document": pdf_document_urn,
                    "title": {
                        "text": pdf_file.filename
                    },
                    "description": {
                        "text": "Document partag√©"
                    }
                }
                
                # Remplacer tous les m√©dias par le document
                media_assets.clear()
                media_assets.append(document_media)
                
                # Modifier le shareMediaCategory pour DOCUMENT
                post_data["specificContent"]["com.linkedin.ugc.ShareContent"]["shareMediaCategory"] = "DOCUMENT"
                
                logger.info(f"üìÑ Configuration post pour document: {pdf_document_urn}")
                return True
            else:
                logger.error(f"‚ùå √âchec de l'upload PDF")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Exception lors du traitement PDF: {str(e)}")
            return False
    
    return False

def upload_image_to_linkedin(image_content, access_token, urn, content_type='image/jpeg'):
    """
    Upload une image sur LinkedIn et retourne l'asset URN
    
    Args:
        image_content (bytes): Contenu de l'image
        access_token (str): Token d'acc√®s LinkedIn
        urn (str): URN de l'utilisateur
        content_type (str): Type MIME de l'image
        
    Returns:
        str: Asset URN ou None en cas d'erreur
    """
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json",
        "X-Restli-Protocol-Version": "2.0.0"
    }
    
    try:
        # 1. Enregistrer le m√©dia sur LinkedIn
        register_payload = {
            "registerUploadRequest": {
                "owner": urn,
                "recipes": ["urn:li:digitalmediaRecipe:feedshare-image"],
                "serviceRelationships": [
                    {"relationshipType": "OWNER", "identifier": "urn:li:userGeneratedContent"}
                ]
            }
        }

        reg_resp = requests.post(LINKEDIN_ASSET_REGISTRATION_URL, headers=headers, json=register_payload)
        if reg_resp.status_code != 200:
            logger.error(f"Erreur registre upload: {reg_resp.text}")
            return None

        upload_info = reg_resp.json().get("value", {})
        upload_url = upload_info.get("uploadMechanism", {}).get("com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest", {}).get("uploadUrl")
        asset = upload_info.get("asset")

        if not upload_url or not asset:
            logger.error("Upload URL ou asset manquant")
            return None

        # 2. Uploader l'image
        upload_headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": content_type
        }

        put_resp = requests.put(upload_url, data=image_content, headers=upload_headers)

        if put_resp.status_code not in [200, 201]:
            logger.error(f"Erreur upload image: {put_resp.text}")
            return None

        return asset
        
    except Exception as e:
        logger.error(f"Exception upload image LinkedIn: {str(e)}")
        return None

def download_pexels_photo(photo_url, size='medium'):
    """
    T√©l√©charge une photo depuis Pexels et la retourne en bytes
    
    Args:
        photo_url (str): URL de la photo
        size (str): Taille de l'image ('small', 'medium', 'large')
        
    Returns:
        bytes: Contenu de l'image ou None en cas d'erreur
    """
    try:
        response = requests.get(photo_url, timeout=30)
        if response.status_code == 200:
            return response.content
        else:
            logger.error(f"Erreur t√©l√©chargement photo: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"Exception t√©l√©chargement photo: {str(e)}")
        return None

@app.route("/api/search_photos", methods=["POST"])
def search_photos():
    """
    API endpoint pour rechercher des photos Pexels
    """
    if 'profile' not in session:
        return jsonify({"error": "Non authentifi√©"}), 401
    
    try:
        data = request.get_json()
        query = data.get('query', '').strip()
        page = data.get('page', 1)
        
        if not query:
            return jsonify({"error": "Terme de recherche requis"}), 400
        
        if len(query) < 2:
            return jsonify({"error": "Terme de recherche trop court (minimum 2 caract√®res)"}), 400
        
        # Rechercher sur Pexels
        results = search_pexels_photos(query, per_page=12, page=page)
        
        if results is None:
            return jsonify({"error": "Service de photos temporairement indisponible"}), 503
        
        return jsonify({
            "success": True,
            "results": results
        })
        
    except Exception as e:
        logger.error(f"Erreur recherche photos: {str(e)}")
        return jsonify({"error": "Erreur interne du serveur"}), 500

# Si vous avez besoin d'une route personnalis√©e pour les fichiers statiques, 
# vous pouvez ajouter ceci (mais normalement ce n'est pas n√©cessaire):
@app.route('/static/<path:path>')
def send_static(path):
    return send_from_directory('static', path)

# Vous pouvez utiliser cette route pour d√©boguer
@app.route('/debug-static')
def debug_static():
    static_files = os.listdir('static')
    return f"Fichiers dans le dossier static: {static_files}"
@app.template_filter('clean_html')
def clean_html(text):
    """Nettoie le texte des tags HTML et entit√©s"""
    if not text:
        return ""
    
    # D√©codage des entit√©s HTML
    text = html.unescape(text)
    
    # Suppression des balises HTML
    text = re.sub(r'<[^>]+>', '', text)
    
    # Nettoyage des espaces multiples
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text

def optimize_query_with_gemini(raw_query, language="fr"):
    """
    Agent hybride : utilise Gemini pour optimiser la requ√™te avant l'envoi √† NewsAPI.
    Corrige les fautes, reformule et g√©n√®re plusieurs requ√™tes optimis√©es.
    
    Args:
        raw_query (str): Requ√™te brute de l'utilisateur
        language (str): Langue de la requ√™te
        
    Returns:
        list: Liste de requ√™tes optimis√©es
    """
    try:
        prompt = f"""
Tu es un expert en recherche d'actualit√©s. Optimise cette requ√™te pour l'API NewsAPI.

Requ√™te utilisateur : "{raw_query}"
Langue : {language}

T√¢ches :
1. Corrige les fautes d'orthographe et de grammaire
2. Identifie les concepts cl√©s et g√©n√®re des synonymes pertinents
3. Cr√©e 3-5 requ√™tes optimis√©es diff√©rentes pour maximiser la pertinence
4. Utilise des termes sp√©cifiques et des variations intelligentes

Exemples de transformation :
- "IA" ‚Üí "intelligence artificielle", "artificial intelligence", "AI"
- "tech" ‚Üí "technologie", "innovation technologique", "startup tech"
- "crypto" ‚Üí "cryptomonnaie", "bitcoin", "blockchain"

Format de r√©ponse JSON uniquement :
{{
    "original_query": "requ√™te originale",
    "corrected_query": "requ√™te corrig√©e",
    "optimized_queries": [
        "requ√™te optimis√©e 1",
        "requ√™te optimis√©e 2",
        "requ√™te optimis√©e 3"
    ],
    "reasoning": "explication de l'optimisation"
}}

R√©ponds uniquement en JSON valide.
"""

        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        
        # Extraire le JSON de la r√©ponse
        response_text = response.text.strip()
        if response_text.startswith('```json'):
            response_text = response_text[7:-3]
        elif response_text.startswith('```'):
            response_text = response_text[3:-3]
            
        result = json.loads(response_text)
        
        logger.info(f"ü§ñ Gemini optimisation - Original: '{raw_query}' ‚Üí Optimis√©: {result['optimized_queries']}")
        
        return result['optimized_queries']
        
    except Exception as e:
        logger.error(f"‚ùå Erreur Gemini optimisation: {str(e)}")
        # Fallback : retourner la requ√™te originale nettoy√©e
        return [raw_query.strip()]

def get_news_by_keyword(keyword, days=30, language="fr"):
    """
    Agent hybride : utilise Gemini pour optimiser les requ√™tes avant NewsAPI.
    Corrige les fautes, reformule et g√©n√®re plusieurs requ√™tes pour maximiser la pertinence.

    Args:
        keyword (str): Mot-cl√© ou expression entr√©e par l'utilisateur
        days (int, optional): Nombre de jours pour les actualit√©s r√©centes
        language (str, optional): Langue des articles (fr, en)

    Returns:
        list: Liste d'articles d'actualit√© optimis√©s
    """
    # G√©n√©rer le nom du cache bas√© sur la requ√™te originale
    cache_key = f"{keyword.strip().replace(' ', '_')}_{language}_{days}.json"
    cache_path = os.path.join(cache_dir, cache_key)

    # V√©rifier si un cache valide existe (moins de 3 heures)
    if os.path.exists(cache_path):
        file_modified_time = os.path.getmtime(cache_path)
        now = datetime.now().timestamp()

        if now - file_modified_time < 10800:
            try:
                with open(cache_path, 'r', encoding='utf-8') as f:
                    cached_data = json.load(f)
                    logger.info(f"‚úÖ Cache utilis√© pour : {keyword}")
                    return cached_data
            except Exception as e:
                logger.error(f"‚ùå Erreur de lecture du cache : {str(e)}")

    # üöÄ AGENT HYBRIDE : Optimiser avec Gemini
    optimized_queries = optimize_query_with_gemini(keyword, language)
    
    all_articles = []
    date_from = (datetime.utcnow() - timedelta(days=days)).strftime('%Y-%m-%d')
    
    # Ex√©cuter chaque requ√™te optimis√©e
    for i, optimized_query in enumerate(optimized_queries):
        try:
            # Formater pour NewsAPI (espaces ‚Üí +)
            formatted_query = '+'.join(optimized_query.split())
            
            params = {
                'q': formatted_query,
                'from': date_from,
                'sortBy': 'relevancy',
                'language': language,
                'apiKey': NEWS_API_KEY,
                'pageSize': 15  # R√©duit pour √©viter les doublons
            }

            logger.info(f"üîç Requ√™te {i+1}/{len(optimized_queries)} NewsAPI : {formatted_query}")

            response = requests.get(NEWS_API_URL, params=params, timeout=15)

            if response.status_code == 200:
                data = response.json()
                articles = data.get('articles', [])

                for article in articles:
                    if article.get('title') and article.get('description'):
                        # √âviter les doublons bas√©s sur l'URL
                        if not any(existing.get('url') == article.get('url') for existing in all_articles):
                            try:
                                date_str = article.get('publishedAt', '')
                                date_obj = datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%SZ')
                                article['formatted_date'] = date_obj.strftime('%d/%m/%Y')
                                article['query_source'] = optimized_query  # Tra√ßabilit√©
                            except:
                                article['formatted_date'] = 'Date inconnue'
                                article['query_source'] = optimized_query

                            all_articles.append(article)

            else:
                logger.warning(f"‚ö†Ô∏è Erreur API {response.status_code} pour requ√™te '{optimized_query}'")

        except Exception as e:
            logger.error(f"‚ùå Erreur requ√™te '{optimized_query}': {str(e)}")
            continue

    # Trier par date (plus r√©cent en premier) et limiter √† 21 articles
    all_articles.sort(key=lambda x: x.get('publishedAt', ''), reverse=True)
    final_articles = all_articles[:21]

    # Sauvegarder en cache
    if final_articles:
        try:
            with open(cache_path, 'w', encoding='utf-8') as f:
                json.dump(final_articles, f, ensure_ascii=False)
                logger.info(f"üíæ Cache cr√©√© pour : {keyword} ({len(final_articles)} articles)")
        except Exception as e:
            logger.error(f"‚ùå Erreur d'√©criture du cache : {str(e)}")

    logger.info(f"üéØ Agent hybride termin√© : {len(final_articles)} articles trouv√©s via {len(optimized_queries)} requ√™tes optimis√©es")
    return final_articles
    
def get_cached_news(query, language, days=3):
    """
    R√©cup√®re les r√©sultats mis en cache ou effectue un nouvel appel API
    
    Args:
        query (str): Requ√™te de recherche
        language (str): Langue des articles
        days (int): Jours √† consid√©rer
        
    Returns:
        list: Liste d'articles
    """
    # G√©n√©rer un nom de fichier de cache bas√© sur la requ√™te
    cache_filename = f"{query.replace(' ', '_')}_{language}_{days}.json"
    cache_path = os.path.join(cache_dir, cache_filename)
    
    # V√©rifier si un cache valide existe (moins de 3 heures)
    if os.path.exists(cache_path):
        file_modified_time = os.path.getmtime(cache_path)
        now = datetime.now().timestamp()
        
        # Si le cache a moins de 3 heures
        if now - file_modified_time < 10800:  # 3 heures en secondes
            try:
                with open(cache_path, 'r', encoding='utf-8') as f:
                    cached_data = json.load(f)
                    print(f"Utilisation du cache pour: {query}")
                    return cached_data
            except Exception as e:
                print(f"Erreur de lecture du cache: {str(e)}")
    
    # Si pas de cache valide, faire l'appel √† l'API
    articles = get_news_by_sector_actual(query, days=days, language=language)
    
    # Sauvegarder les r√©sultats dans le cache
    try:
        with open(cache_path, 'w', encoding='utf-8') as f:
            json.dump(articles, f, ensure_ascii=False)
            print(f"Cache cr√©√© pour: {query}")
    except Exception as e:
        print(f"Erreur d'√©criture du cache: {str(e)}")
    
    return articles

def get_news_by_sector(sector, keywords=None, days=7, language="fr"):
    """
    Version am√©lior√©e pour r√©cup√©rer plus d'actualit√©s par secteur
    """
    # V√©rifier le cache
    cache_key = f"sector_{sector}_{language}_{days}.json"
    cache_path = os.path.join(cache_dir, cache_key)
    
    # V√©rifier si un cache valide existe (moins de 1 heure pour avoir plus de fra√Æcheur)
    if os.path.exists(cache_path):
        file_modified_time = os.path.getmtime(cache_path)
        now = datetime.now().timestamp()
        
        if now - file_modified_time < 3600:  # 1 heure en secondes
            try:
                with open(cache_path, 'r', encoding='utf-8') as f:
                    cached_data = json.load(f)
                    logger.info(f"Utilisation du cache secteur pour: {sector}")
                    return cached_data
            except Exception as e:
                logger.error(f"Erreur de lecture du cache secteur: {str(e)}")
    
    # Mapping √©tendu avec plus de termes de recherche
    sector_keywords = {
        'tech': [
            'technologie OR informatique OR "intelligence artificielle" OR IA OR digital',
            'startup OR innovation OR d√©veloppement OR logiciel OR application',
            'cybers√©curit√© OR blockchain OR cloud OR "r√©alit√© virtuelle"',
            'automation OR robotique OR "machine learning" OR algorithme'
        ],
        'marketing': [
            'marketing OR publicit√© OR "r√©seaux sociaux" OR communication',
            'brand OR marque OR "content marketing" OR SEO',
            'influencer OR "marketing digital" OR e-commerce OR conversion',
            '"growth hacking" OR analytics OR "customer experience"'
        ],
        'finance': [
            'finance OR banque OR investissement OR √©conomie OR bourse',
            'fintech OR crypto OR bitcoin OR "monnaie num√©rique"',
            'assurance OR cr√©dit OR "gestion patrimoine" OR √©pargne',
            'r√©gulation OR "march√© financier" OR trading OR "taux int√©r√™t"'
        ],
        'sante': [
            'sant√© OR m√©decine OR "bien-√™tre" OR m√©dical OR h√¥pital',
            'pharma OR m√©dicament OR vaccin OR traitement OR th√©rapie',
            '"sant√© mentale" OR nutrition OR pr√©vention OR diagnostic',
            'biotechnologie OR "recherche m√©dicale" OR "sant√© digitale"'
        ],
        'education': [
            '√©ducation OR enseignement OR formation OR √©cole OR universit√©',
            '"formation professionnelle" OR "e-learning" OR p√©dagogie',
            '√©tudiant OR professeur OR "syst√®me √©ducatif" OR apprentissage',
            '"comp√©tences num√©riques" OR "formation continue" OR dipl√¥me'
        ],
        'rh': [
            '"ressources humaines" OR recrutement OR emploi OR "gestion talent"',
            'management OR leadership OR "bien-√™tre travail" OR motivation',
            '"t√©l√©travail" OR "travail hybride" OR "qualit√© vie travail"',
            'formation OR "d√©veloppement personnel" OR carri√®re OR "soft skills"'
        ],
        'consulting': [
            'conseil OR consulting OR strat√©gie OR "transformation digitale"',
            'management OR "am√©lioration performance" OR optimisation',
            '"change management" OR innovation OR "business model"',
            'audit OR "due diligence" OR "gestion projet" OR efficacit√©'
        ],
        'retail': [
            'commerce OR distribution OR retail OR vente OR "exp√©rience client"',
            'e-commerce OR "commerce en ligne" OR marketplace OR omnicanal',
            'consommation OR "comportement consommateur" OR tendances',
            '"magasin connect√©" OR "retail tech" OR "point vente" OR CRM'
        ],
        'general': [
            'entreprise OR business OR √©conomie OR "actualit√© business"',
            'innovation OR startup OR "transformation num√©rique"',
            'management OR leadership OR "monde travail"',
            'France OR "march√© fran√ßais" OR "√©conomie fran√ßaise"'
        ]
    }
    
    # R√©cup√©rer les termes de recherche pour le secteur
    search_terms = sector_keywords.get(sector, sector_keywords['general'])
    
    all_articles = []
    
    # Faire plusieurs requ√™tes avec diff√©rents termes pour avoir plus de vari√©t√©
    for search_term in search_terms:
        try:
            # Ajouter des mots-cl√©s suppl√©mentaires si fournis
            if keywords:
                search_query = f"({search_term}) AND ({keywords})"
            else:
                search_query = search_term
            
            # Pr√©parer les param√®tres pour l'API
            date_from = (datetime.utcnow() - timedelta(days=days)).strftime('%Y-%m-%d')
            
            params = {
                'q': search_query,
                'from': date_from,
                'sortBy': 'publishedAt',
                'language': language,
                'apiKey': NEWS_API_KEY,
                'pageSize': 25  # Moins par requ√™te mais plus de requ√™tes
            }
            
            logger.info(f"Requ√™te NewsAPI secteur {sector}: {search_query}")
            
            # Appel √† l'API
            response = requests.get(NEWS_API_URL, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                articles = data.get('articles', [])
                
                # Filtrer et formater les articles
                for article in articles:
                    if article.get('title') and article.get('description'):
                        # √âviter les doublons
                        if not any(existing['url'] == article.get('url') for existing in all_articles):
                            try:
                                # Formater la date
                                date_str = article.get('publishedAt', '')
                                if date_str:
                                    date_obj = datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%SZ')
                                    article['formatted_date'] = date_obj.strftime('%d/%m/%Y')
                                else:
                                    article['formatted_date'] = 'Date inconnue'
                            except:
                                article['formatted_date'] = 'Date inconnue'
                            
                            all_articles.append(article)
                
                logger.info(f"Articles trouv√©s pour '{search_term}': {len(articles)}")
                
            else:
                logger.warning(f"Erreur API pour '{search_term}': {response.status_code}")
                
            # Petite pause entre les requ√™tes pour √©viter les limites
            time.sleep(0.5)
            
        except Exception as e:
            logger.error(f"Erreur lors de la recherche '{search_term}': {str(e)}")
            continue
    
    # Trier par date et prendre les plus r√©cents
    all_articles.sort(key=lambda x: x.get('publishedAt', ''), reverse=True)
    
    # Limiter √† 20 articles maximum pour de meilleures performances
    final_articles = all_articles[:20]
    
    logger.info(f"Total articles secteur {sector}: {len(final_articles)}")
    
    # Sauvegarder les r√©sultats dans le cache
    try:
        with open(cache_path, 'w', encoding='utf-8') as f:
            json.dump(final_articles, f, ensure_ascii=False)
            logger.info(f"Cache secteur cr√©√© pour: {sector}")
    except Exception as e:
        logger.error(f"Erreur d'√©criture du cache secteur: {str(e)}")
    
    return final_articles

@app.route("/test-news")
def test_news():
    """Route de test pour d√©bugger les actualit√©s"""
    try:
        # Test avec une requ√™te simple
        test_articles = get_news_by_sector_actual("tech", "intelligence artificielle", days=7, language="fr")
        
        html_debug = f"""
        <h1>üîç Test News API - Debug</h1>
        <h2>R√©sultats trouv√©s: {len(test_articles)}</h2>
        
        <h3>üìä Informations de debug:</h3>
        <ul>
            <li><strong>Cl√© API:</strong> {NEWS_API_KEY[:15]}...</li>
            <li><strong>URL API:</strong> {NEWS_API_URL}</li>
            <li><strong>Secteur test√©:</strong> tech</li>
            <li><strong>Mot-cl√©:</strong> intelligence artificielle</li>
        </ul>
        
        <h3>üì∞ Articles trouv√©s:</h3>
        """
        
        for i, article in enumerate(test_articles[:5]):
            html_debug += f"""
            <div style="border: 1px solid #ccc; padding: 15px; margin: 10px 0; border-radius: 8px;">
                <h4>{i+1}. {article.get('title', 'No title')}</h4>
                <p><strong>Source:</strong> {article.get('source', {}).get('name', 'Unknown')}</p>
                <p><strong>Description:</strong> {article.get('description', 'No description')[:200]}...</p>
                <p><strong>Date:</strong> {article.get('formatted_date', 'Unknown')}</p>
                <p><strong>URL:</strong> <a href="{article.get('url', '#')}" target="_blank">Lire l'article</a></p>
            </div>
            """
        
        if not test_articles:
            html_debug += """
            <div style="background: #fee; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h3>‚ùå Aucun article trouv√©</h3>
                <p>Causes possibles:</p>
                <ul>
                    <li>Cl√© API NewsAPI expir√©e ou invalide</li>
                    <li>Limite de requ√™tes atteinte (429)</li>
                    <li>Aucun article disponible pour ces crit√®res</li>
                    <li>Probl√®me de connexion r√©seau</li>
                </ul>
                <p><strong>Action recommand√©e:</strong> V√©rifiez les logs serveur pour plus de d√©tails.</p>
            </div>
            """
        
        html_debug += '<p><a href="/news_assistant">‚Üê Retour aux actualit√©s</a></p>'
        return html_debug
        
    except Exception as e:
        return f"""
        <h1>‚ùå Erreur lors du test News API</h1>
        <div style="background: #fee; padding: 20px; border-radius: 8px;">
            <h3>Erreur d√©tect√©e:</h3>
            <p><strong>{str(e)}</strong></p>
            
            <h3>Actions √† effectuer:</h3>
            <ol>
                <li>V√©rifiez votre cl√© API NewsAPI sur <a href="https://newsapi.org/account" target="_blank">newsapi.org</a></li>
                <li>Assurez-vous que la cl√© est bien d√©finie dans vos variables d'environnement</li>
                <li>V√©rifiez que vous n'avez pas d√©pass√© la limite de 100 requ√™tes/jour (plan gratuit)</li>
                <li>Essayez avec d'autres mots-cl√©s plus simples</li>
            </ol>
        </div>
        <p><a href="/news_assistant">‚Üê Retour aux actualit√©s</a></p>
        """

@app.route("/search_linkedin_users", methods=["POST"])
def search_linkedin_users():
    """
    API endpoint pour rechercher des utilisateurs LinkedIn
    """
    if 'profile' not in session or 'access_token' not in session:
        return jsonify({"error": "Non authentifi√©"}), 401
    
    access_token = session['access_token']
    query = request.json.get('query', '')
    
    if not query or len(query) < 2:
        return jsonify({"error": "La requ√™te doit contenir au moins 2 caract√®res"}), 400
    
    # URL de l'API LinkedIn pour la recherche de personnes
    # Note: Cette API n√©cessite une autorisation sp√©ciale de LinkedIn
    search_url = "https://api.linkedin.com/v2/search/blended"
    
    params = {
        "q": "keywork",
        "keywords": query,
        "filters": "List(resultType->PEOPLE)",
        "limit": 5
    }
    
    headers = {
        "Authorization": f"Bearer {access_token}",
        "X-Restli-Protocol-Version": "2.0.0"
    }
    
    try:
        response = requests.get(search_url, params=params, headers=headers)
        
        if response.status_code != 200:
            # L'API de recherche LinkedIn est tr√®s restrictive
            # Si elle √©choue, nous utilisons une m√©thode alternative
            return search_linkedin_users_alternative(query)
        
        data = response.json()
        results = []
        
        for element in data.get('elements', []):
            if element.get('type') == 'PEOPLE':
                for person in element.get('elements', []):
                    person_id = person.get('entityUrn', '').split(':')[-1]
                    results.append({
                        'id': person_id,
                        'name': person.get('title', {}).get('text', ''),
                        'headline': person.get('headline', {}).get('text', ''),
                        'profile_url': f"https://www.linkedin.com/in/{person_id}/",
                        'image_url': person.get('image', {}).get('attributes', [{}])[0].get('sourceImage', {}).get('accessibilityText', '')
                    })
        
        return jsonify({"results": results})
    
    except Exception as e:
        logger.error(f"Erreur lors de la recherche LinkedIn: {str(e)}")
        return search_linkedin_users_alternative(query)

def search_linkedin_users_alternative(query):
    """
    M√©thode alternative pour sugg√©rer des utilisateurs LinkedIn
    Cette fonction g√©n√®re toujours au moins une suggestion
    """
    results = []
    
    try:
        # Chercher dans la base de donn√©es des utilisateurs qui correspondent √† la requ√™te
        users = User.query.filter(
            (User.name.ilike(f"%{query}%")) | 
            (User.first_name.ilike(f"%{query}%")) | 
            (User.last_name.ilike(f"%{query}%"))
        ).limit(5).all()
        
        for user in users:
            # Extraire l'ID LinkedIn √† partir du sub
            linkedin_id = user.sub.split('_')[-1] if user.sub else None
            
            if linkedin_id:
                results.append({
                    'id': linkedin_id,
                    'name': f"{user.first_name} {user.last_name}",
                    'headline': "Utilisateur LinkedBoost",
                    'profile_url': f"https://www.linkedin.com/in/{linkedin_id}/",
                    'image_url': user.picture or ""
                })
    except Exception as e:
        logger.error(f"Erreur lors de la recherche d'utilisateurs: {str(e)}")
    
    # Si aucun r√©sultat, ajouter des suggestions g√©n√©riques
    # TOUJOURS ajouter au moins une suggestion pour tester
    if len(results) == 0:
        # Ajouter quelques suggestions g√©n√©riques
        results.append({
            'id': 'test-user',
            'name': query if query else 'Utilisateur test',
            'headline': "Test de mention LinkedIn",
            'profile_url': f"https://www.linkedin.com/search/results/people/?keywords={query}",
            'image_url': ""
        })
        
        # Ajouter quelques c√©l√©brit√©s LinkedIn comme suggestions
        celebrities = [
            {
                'id': 'billgates',
                'name': 'Bill Gates',
                'headline': 'Co-fondateur de Microsoft',
                'profile_url': 'https://www.linkedin.com/in/williamhgates/',
                'image_url': ''
            },
            {
                'id': 'melindagates',
                'name': 'Melinda French Gates',
                'headline': 'Philanthrope',
                'profile_url': 'https://www.linkedin.com/in/melindagates/',
                'image_url': ''
            }
        ]
        
        # Ajouter ces c√©l√©brit√©s aux r√©sultats
        results.extend(celebrities)
    
    return jsonify({"results": results})


# Modifications √† apporter dans app.py

@app.route("/news_assistant", methods=["GET", "POST"])
def news_assistant():
    if 'profile' not in session:
        return redirect(url_for("index"))
    
    # R√©cup√©rer l'utilisateur
    user = User.query.filter_by(sub=session['profile'].get("sub", "")).first()
    if not user:
        return redirect(url_for("dashboard"))
    
    # R√©cup√©rer le secteur de l'utilisateur ou utiliser une valeur par d√©faut
    sector = user.secteur or "general"
    news_articles = []
    selected_article = None
    error_message = None
    success_message = None
    
    # R√©cup√©rer les param√®tres de recherche
    search_keyword = request.args.get('keyword', '')
    language = request.args.get('language', 'fr')
    
    # Traitement des actions POST
    if request.method == "POST":
        logger.info(f"POST re√ßu avec donn√©es: {request.form}")
        
        if 'search' in request.form:
            # Recherche d'actualit√©s avec un mot-cl√©
            search_keyword = request.form.get('keyword', '')
            language = request.form.get('language', 'fr')
            
            # Rediriger vers GET avec les param√®tres pour permettre le partage d'URL
            return redirect(url_for('news_assistant', keyword=search_keyword, language=language))
            
        elif 'select_article' in request.form:
            # L'utilisateur a s√©lectionn√© un article
            try:
                logger.info("Traitement de la s√©lection d'article")
                
                # R√©cup√©rer les donn√©es directement depuis le formulaire
                article_data = {
                    'title': request.form.get('article_title', ''),
                    'description': request.form.get('article_description', ''),
                    'source': {'name': request.form.get('article_source', '')},
                    'url': request.form.get('article_url', ''),
                    'formatted_date': request.form.get('article_date', ''),
                    'urlToImage': request.form.get('article_image', ''),
                    'customPrompt': request.form.get('custom_prompt', ''),
                    'tone': request.form.get('tone', 'professionnel'),
                    'perspective': request.form.get('perspective', 'neutre')
                }
                
                logger.info(f"Donn√©es article r√©cup√©r√©es: {article_data}")
                
                # V√©rifier que l'article a un titre et une description
                if not article_data['title'] or not article_data['description']:
                    error_message = "L'article s√©lectionn√© est incomplet. Veuillez r√©essayer."
                    logger.error("Article incomplet d√©tect√©")
                else:
                    # Stocker l'article dans la session
                    session['selected_article'] = article_data
                    logger.info("Article stock√© dans la session avec succ√®s")
                    
                    # Rediriger vers le dashboard avec un param√®tre de succ√®s
                    session['article_success'] = True
                    return redirect(url_for("dashboard"))
                    
            except Exception as e:
                error_message = f"Erreur lors de la s√©lection de l'article: {str(e)}"
                logger.error(f"Erreur de s√©lection d'article: {str(e)}")
    
    # Pour les requ√™tes GET ou si POST n'a pas redirig√©
    try:
        # R√©cup√©rer les actualit√©s avec gestion d'erreurs am√©lior√©e
        logger.info(f"Recherche d'actualit√©s: secteur={sector}, keyword={search_keyword}, langue={language}")
        
        if search_keyword:
            # Si l'utilisateur a entr√© un mot-cl√©, effectuer une recherche g√©n√©rale (ignorer le secteur)
            news_articles = get_news_by_keyword(search_keyword, language=language, days=30)
        else:
            # Sinon, afficher les actualit√©s du secteur de l'utilisateur
            news_articles = get_news_by_sector(sector, language=language, days=30)
        
        # Log du nombre d'articles trouv√©s
        logger.info(f"Nombre d'articles trouv√©s: {len(news_articles)}")
        
        # Si aucun article n'est trouv√©, faire une recherche de secours
        if not news_articles:
            if search_keyword:
                logger.info(f"Aucun article trouv√© avec mot-cl√©, tentative avec secteur g√©n√©ral")
                news_articles = get_news_by_sector("general", search_keyword, language=language, days=30)
            else:
                logger.info(f"Aucun article trouv√© pour le secteur, tentative avec le secteur 'general'")
                news_articles = get_news_by_sector("general", language=language, days=30)
        
    except Exception as e:
        error_message = f"Erreur lors de la r√©cup√©ration des actualit√©s: {str(e)}"
        logger.error(f"Exception lors de la r√©cup√©ration des actualit√©s: {str(e)}")
        news_articles = []
    
    # R√©cup√©rer l'article s√©lectionn√© depuis la session si disponible
    if not selected_article and 'selected_article' in session:
        selected_article = session.get('selected_article')
    
    return render_template(
        "news_assistant.html",
        news=news_articles,
        selected=selected_article,
        sector=sector,
        keyword=search_keyword,
        language=language,
        error=error_message,
        success=success_message
    )

    
@app.route("/")
def index():
    # Si d√©j√† connect√©, rediriger vers LinkedIn
    if 'user_id' in session:
        return redirect(url_for('linkedin_auth'))
    
    return render_template("index_auth.html")

@app.route("/signin", methods=["GET", "POST"])
def signin():
    if 'user_id' in session:
        return redirect(url_for('linkedin_auth'))
    
    if request.method == "POST":
        email = request.form.get("email", "").strip().lower()
        password = request.form.get("password", "")
        
        if not email or not password:
            return render_template("signin.html", error="Veuillez remplir tous les champs")
        
        if not is_valid_email(email):
            return render_template("signin.html", error="Format d'email invalide")
        
        # Rechercher l'utilisateur
        user = LocalUser.query.filter_by(email=email).first()
        
        if not user:
            return render_template("signin.html", error="Email ou mot de passe incorrect")
        
        # V√©rifier si le compte est verrouill√©
        if user.is_locked():
            minutes_left = int((user.locked_until - datetime.utcnow()).total_seconds() / 60)
            return render_template("signin.html", error=f"Compte verrouill√©. R√©essayez dans {minutes_left} minutes")
        
        # V√©rifier le mot de passe
        if not user.check_password(password):
            # Incr√©menter les tentatives √©chou√©es
            user.login_attempts += 1
            if user.login_attempts >= 5:
                user.lock_account()
                db.session.commit()
                return render_template("signin.html", error="Trop de tentatives √©chou√©es. Compte verrouill√© pour 15 minutes")
            else:
                db.session.commit()
                return render_template("signin.html", error="Email ou mot de passe incorrect")
        
        # Connexion r√©ussie
        user.login_attempts = 0
        user.last_login = datetime.utcnow()
        user.locked_until = None
        db.session.commit()
        
        session['user_id'] = user.id
        session['user_email'] = user.email
        session['user_name'] = user.full_name
        
        logger.info(f"Connexion r√©ussie pour: {email}")
        return redirect(url_for('linkedin_auth'))
    
    return render_template("signin.html")

# Route Sign Up (Inscription)
@app.route("/signup", methods=["GET", "POST"])
def signup():
    if 'user_id' in session:
        return redirect(url_for('linkedin_auth'))
    
    if request.method == "POST":
        # R√©cup√©rer les donn√©es du formulaire
        email = request.form.get("email", "").strip().lower()
        password = request.form.get("password", "")
        confirm_password = request.form.get("confirm_password", "")
        first_name = request.form.get("first_name", "").strip()
        last_name = request.form.get("last_name", "").strip()
        company = request.form.get("company", "").strip()
        job_title = request.form.get("job_title", "").strip()
        
        # Validations
        if not all([email, password, confirm_password, first_name, last_name]):
            return render_template("signup.html", error="Veuillez remplir tous les champs obligatoires")
        
        if not is_valid_email(email):
            return render_template("signup.html", error="Format d'email invalide")
        
        if password != confirm_password:
            return render_template("signup.html", error="Les mots de passe ne correspondent pas")
        
        is_valid, password_message = is_strong_password(password)
        if not is_valid:
            return render_template("signup.html", error=password_message)
        
        # V√©rifier si l'email existe d√©j√†
        if LocalUser.query.filter_by(email=email).first():
            return render_template("signup.html", error="Un compte avec cet email existe d√©j√†")
        
        try:
            # Cr√©er le nouveau utilisateur
            user = LocalUser(
                email=email,
                first_name=first_name,
                last_name=last_name,
                company=company,
                job_title=job_title
            )
            user.set_password(password)
            
            db.session.add(user)
            db.session.commit()
            
            # Connexion automatique apr√®s inscription
            session['user_id'] = user.id
            session['user_email'] = user.email
            session['user_name'] = user.full_name
            
            logger.info(f"Nouveau compte cr√©√©: {email}")
            return redirect(url_for('welcome'))
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"Erreur lors de la cr√©ation du compte: {str(e)}")
            return render_template("signup.html", error="Erreur lors de la cr√©ation du compte")
    
    return render_template("signup.html")

# Route de bienvenue apr√®s inscription
@app.route("/welcome")
@login_required
def welcome():
    user_id = session.get('user_id')
    user = LocalUser.query.get(user_id)
    return render_template("welcome.html", user=user)

# Route vers LinkedIn (prot√©g√©e)
@app.route("/linkedin_auth")
@login_required
def linkedin_auth():
    params = {
        "response_type": "code",
        "client_id": CLIENT_ID,
        "redirect_uri": REDIRECT_URI,
        "scope": SCOPES,
        "state": "random123",
        "prompt": "login"
    }
    auth_url = f"{LINKEDIN_AUTH_URL}?{urlencode(params)}"
    return redirect(auth_url)


@app.route("/api/check_email", methods=["POST"])
def check_email():
    email = request.json.get('email', '').strip().lower()
    
    if not is_valid_email(email):
        return jsonify({'available': False, 'message': 'Format d\'email invalide'})
    
    user = LocalUser.query.filter_by(email=email).first()
    if user:
        return jsonify({'available': False, 'message': 'Cet email est d√©j√† utilis√©'})
    
    return jsonify({'available': True, 'message': 'Email disponible'})

# Route de profil utilisateur
@app.route("/profile")
@login_required
def profile():
    user_id = session.get('user_id')
    user = LocalUser.query.get(user_id)
    return render_template("user_profile.html", user=user)

# Route pour mettre √† jour le profil
@app.route("/profile/update", methods=["POST"])
@login_required
def update_profile():
    user_id = session.get('user_id')
    user = LocalUser.query.get(user_id)
    
    user.first_name = request.form.get("first_name", "").strip()
    user.last_name = request.form.get("last_name", "").strip()
    user.company = request.form.get("company", "").strip()
    user.job_title = request.form.get("job_title", "").strip()
    
    try:
        db.session.commit()
        session['user_name'] = user.full_name
        return redirect(url_for('profile'))
    except Exception as e:
        db.session.rollback()
        return render_template("user_profile.html", user=user, error="Erreur lors de la mise √† jour")

# Route de d√©connexion
@app.route("/logout")
def logout():
    user_email = session.get('user_email')
    session.clear()
    
    if user_email:
        logger.info(f"D√©connexion de: {user_email}")
    
    resp = make_response(redirect("/"))
    resp.set_cookie('linkedin_session', '', expires=0)
    resp.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    resp.headers["Pragma"] = "no-cache"
    resp.headers["Expires"] = "0"
    return resp

# Route mot de passe oubli√©
@app.route("/forgot_password", methods=["GET", "POST"])
def forgot_password():
    if request.method == "POST":
        email = request.form.get("email", "").strip().lower()
        
        if not email or not is_valid_email(email):
            return render_template("forgot_password.html", error="Veuillez entrer une adresse email valide")
        
        user = LocalUser.query.filter_by(email=email).first()
        if user:
            # En production, vous enverriez un email ici
            logger.info(f"Demande de r√©initialisation de mot de passe pour: {email}")
            return render_template("forgot_password.html", success="Si cet email existe, vous recevrez les instructions de r√©initialisation")
        else:
            # Ne pas r√©v√©ler si l'email existe ou non
            return render_template("forgot_password.html", success="Si cet email existe, vous recevrez les instructions de r√©initialisation")
    
    return render_template("forgot_password.html")


@app.route("/callback")
def callback():
    code = request.args.get("code")
    if not code:
        return "Erreur : aucun code fourni par LinkedIn."

    data = {
        "grant_type": "authorization_code",
        "code": code,
        "redirect_uri": REDIRECT_URI,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET
    }
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    
    try:
        token_resp = requests.post(LINKEDIN_TOKEN_URL, data=data, headers=headers)

        if token_resp.status_code != 200:
            return f"Erreur token: {token_resp.text}"

        access_token = token_resp.json().get("access_token")
        session['access_token'] = access_token
        headers = {"Authorization": f"Bearer {access_token}"}

        userinfo_resp = requests.get(LINKEDIN_USERINFO_URL, headers=headers)
        if userinfo_resp.status_code != 200:
            return f"Erreur lors de la r√©cup√©ration du profil : {userinfo_resp.text}"

        userinfo = userinfo_resp.json()
        session['profile'] = {
            'email': userinfo.get("email", "inconnu"),
            'name': userinfo.get("name", ""),
            'first_name': userinfo.get("given_name", ""),
            'last_name': userinfo.get("family_name", ""),
            'picture': userinfo.get("picture", ""),
            'language': userinfo.get("locale", {}).get("language", ""),
            'country': userinfo.get("locale", {}).get("country", ""),
            'email_verified': userinfo.get("email_verified", False),
            'sub': userinfo.get("sub", "")
        }

        # üîÅ Cr√©ation ou mise √† jour de l'utilisateur en base
        profile = session["profile"]
        
        # Debug pour voir le contenu du profile
        logger.info(f"Profile re√ßu: {profile}")
        
        try:
            # V√©rifier si l'utilisateur existe d√©j√†
            user = User.query.filter_by(sub=profile["sub"]).first()
            if not user:
                # Cr√©er un nouvel utilisateur
                user = User(sub=profile["sub"])
                db.session.add(user)
                logger.info(f"Nouvel utilisateur cr√©√© avec sub: {profile['sub']}")

            # Mettre √† jour les informations de l'utilisateur
            user.email = profile["email"]
            user.name = profile["name"]
            user.first_name = profile["first_name"]
            user.last_name = profile["last_name"]
            user.picture = profile["picture"]
            user.language = profile["language"]
            user.country = profile["country"]
            user.email_verified = profile["email_verified"]

            # Sauvegarder en base de donn√©es
            db.session.commit()
            logger.info(f"Utilisateur {user.id} mis √† jour avec succ√®s")
            
        except IntegrityError as e:
            db.session.rollback()
            logger.error(f"Erreur d'int√©grit√© lors de la cr√©ation/mise √† jour de l'utilisateur: {str(e)}")
            return f"Erreur de base de donn√©es (IntegrityError): {str(e)}"
        except Exception as e:
            db.session.rollback()
            logger.error(f"Exception lors de la cr√©ation/mise √† jour de l'utilisateur: {str(e)}")
            return f"Erreur inattendue: {str(e)}"

        return redirect(url_for("dashboard"))
        
    except Exception as e:
        logger.error(f"Exception dans la route /callback: {str(e)}")
        return f"Erreur inattendue: {str(e)}"

# Modification √† apporter √† la route dashboard dans app.py
# Ajouter ce code √† votre app.py pour cr√©er un filtre personnalis√© qui extrait les hashtags

import re

@app.template_filter('findhashtags')
def find_hashtags(text):
    """Extraire les hashtags d'un texte"""
    if not text:
        return []
    # Pattern pour trouver les hashtags
    hashtag_pattern = r'#(\w+)'
    hashtags = re.findall(hashtag_pattern, text)
    return ['#' + tag for tag in hashtags]

@app.route("/select_article", methods=["POST"])
def select_article():
    """Route simplifi√©e pour s√©lection directe d'articles"""
    if 'profile' not in session:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        # R√©cup√©rer les donn√©es JSON de l'article
        article_data = request.get_json()
        
        if not article_data:
            return jsonify({'error': 'Aucune donn√©e re√ßue'}), 400
        
        logger.info(f"Article s√©lectionn√©: {article_data.get('title', 'Sans titre')}")
        
        # Valider les donn√©es minimales
        if not article_data.get('title') or not article_data.get('description'):
            return jsonify({'error': 'Donn√©es d\'article incompl√®tes'}), 400
        
        # Stocker les donn√©es basiques dans la session
        session['selected_article'] = {
            'title': article_data.get('title', ''),
            'description': article_data.get('description', ''),
            'source': article_data.get('source', {}),
            'url': article_data.get('url', ''),
            'formatted_date': article_data.get('formatted_date', ''),
            'urlToImage': article_data.get('urlToImage', '')
        }
        session['article_success'] = True
        
        logger.info("Article stock√© avec succ√®s dans la session")
        
        return jsonify({
            'success': True,
            'message': 'Article s√©lectionn√© avec succ√®s',
            'redirect': url_for('dashboard')
        })
        
    except Exception as e:
        logger.error(f"Erreur lors de la s√©lection: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route("/debug_articles")
def debug_articles():
    """Route de d√©bogage pour tester le syst√®me d'articles"""
    if 'profile' not in session:
        return "Non connect√© - <a href='/'>Se connecter</a>"
    
    debug_info = {
        'session_keys': list(session.keys()),
        'selected_article_exists': 'selected_article' in session,
        'selected_article_data': session.get('selected_article', 'Aucun'),
        'article_success': session.get('article_success', False),
        'profile_sub': session.get('profile', {}).get('sub', 'Non d√©fini')
    }
    
    # Test de cr√©ation d'un article factice
    test_article = {
        'title': 'Article de test - Intelligence Artificielle',
        'description': 'Ceci est un article de test pour v√©rifier le syst√®me de s√©lection d\'articles.',
        'source': {'name': 'Test Source'},
        'url': 'https://example.com/test-article',
        'formatted_date': '01/01/2025',
        'urlToImage': ''
    }
    
    # Si on ajoute ?set_test=1 √† l'URL, on met l'article de test en session
    if request.args.get('set_test') == '1':
        session['selected_article'] = test_article
        session['article_success'] = True
        debug_info['test_article_set'] = True
    
    # Si on ajoute ?clear=1 √† l'URL, on efface tout
    if request.args.get('clear') == '1':
        session.pop('selected_article', None)
        session.pop('article_success', None)
        debug_info['session_cleared'] = True
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head><title>Debug Articles</title></head>
    <body style="font-family: Arial; margin: 20px;">
        <h1>üîç Debug Articles</h1>
        <pre>{debug_info}</pre>
        <p>
            <a href="?set_test=1" style="margin: 5px; padding: 8px; background: green; color: white; text-decoration: none;">Test Article</a>
            <a href="?clear=1" style="margin: 5px; padding: 8px; background: red; color: white; text-decoration: none;">Clear Session</a>
            <a href="/dashboard" style="margin: 5px; padding: 8px; background: blue; color: white; text-decoration: none;">Dashboard</a>
            <a href="/news_assistant" style="margin: 5px; padding: 8px; background: purple; color: white; text-decoration: none;">News</a>
        </p>
    </body>
    </html>
    """

@app.route("/dashboard", methods=["GET", "POST"])
def dashboard():
    if 'profile' not in session:
        return redirect(url_for("index"))

    draft = ""
    
    # R√©cup√©rer le message de succ√®s de l'article
    article_success = session.pop('article_success', None)
    
    # Ajouter cette ligne pour g√©rer le bouton Annuler
    if request.args.get('clear') == 'true':
        # Supprimer l'article s√©lectionn√© de la session
        if 'selected_article' in session:
            session.pop('selected_article', None)
        return redirect(url_for('dashboard'))
    
    selected_article = session.get('selected_article')  # R√©cup√©rer l'article s√©lectionn√©
    
    # R√©cup√©rer l'utilisateur
    user = User.query.filter_by(sub=session['profile'].get("sub", "")).first()
    
    # Statistiques pour le tableau de bord
    scheduled_posts = 0
    if user:
        # Nombre de posts programm√©s
        now = datetime.utcnow()
        scheduled_posts = Post.query.filter_by(user_id=user.id, scheduled=True).filter(Post.published_at > now).count()
  
    # R√©cup√©rer les actualit√©s tendance pour le secteur de l'utilisateur
    trending_news = []
    if user and user.secteur:
        try:
            # R√©cup√©rer 3 articles r√©cents maximum
            trending_news = get_news_by_sector(user.secteur, days=1)[:3]
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des actualit√©s: {str(e)}")
    
    if request.method == "POST":
        prompt = request.form.get("prompt")
        tone = request.form.get("tone", "professionnel")
        
        # V√©rifier si l'utilisateur veut g√©n√©rer un post bas√© sur un article s√©lectionn√©
        if 'generate_from_article' in request.form and selected_article:
            try:
                logger.info("G√©n√©ration de post √† partir de l'article s√©lectionn√©")
                
                # NOUVEAU: R√©cup√©rer le prompt personnalis√© depuis le formulaire
                custom_instructions = request.form.get("custom_instructions", "").strip()
                perspective = request.form.get("perspective", "neutre")
                format_type = request.form.get("format", "standard")
                
                # Adapter le prompt selon le format choisi
                format_instructions = {
                    "standard": "R√©dige un post classique donnant ton analyse sur ce sujet",
                    "question": "R√©dige un post sous forme de question engageante pour susciter des r√©actions",
                    "listpoints": "R√©dige un post pr√©sentant les points cl√©s ou enseignements principaux",
                    "story": "R√©dige un post sous forme d'histoire ou de narration engageante"
                }
                
                format_text = format_instructions.get(format_type, format_instructions["standard"])
                
                # G√©n√©rer le contenu avec Gemini
                model = genai.GenerativeModel("gemini-2.0-flash")
                
                # Construire le prompt avec les instructions personnalis√©es
                article_prompt = f"""
                Tu es un expert LinkedIn reconnu pour tes posts pertinents et percutants.
                
                R√©dige un post LinkedIn complet √† partir de l'article suivant :
                
                üì∞ **Titre** : {selected_article.get('title')}
                üìÑ **R√©sum√©** : {selected_article.get('description')}
                üè¢ **Source** : {selected_article.get('source', {}).get('name')}
                
                üéØ **Objectif** : R√©agir √† cette actualit√© en apportant :
                - une analyse personnelle,
                - un point de vue argument√©,
                - des implications concr√®tes pour ton secteur : {user.secteur if user and user.secteur else "g√©n√©ral"},
                - des insights ou propositions utiles pour les professionnels.
                
                üó£Ô∏è **Style attendu** :
                - Ton : {tone}
                - Perspective : {perspective}
                - Format : {format_text}
                - √âcriture fluide, humaine, professionnelle et engageante
                - Inclus une conclusion forte ou une ouverture pour discussion
                - Ajoute 2 ou 3 hashtags pertinents √† la fin
                
                üìù **Contraintes** :
                - Maximum 900 caract√®res
                - Pas de lien externe
                - Commence directement par une accroche ou une id√©e forte
                - Parle √† la premi√®re personne ("je") si le ton est personnel
                
                Inspire-toi des posts qui g√©n√®rent le plus de commentaires sur LinkedIn. Structure le contenu comme un mini-point de vue publi√© par un professionnel engag√©.
                """

                
                # NOUVEAU: Ajouter les instructions personnalis√©es si elles existent
                if custom_instructions:
                    article_prompt += f"\n\nInstructions suppl√©mentaires sp√©cifiques: {custom_instructions}"
                
                response = model.generate_content(article_prompt)
                draft = response.text.strip()
                
                # Effacer l'article de la session apr√®s g√©n√©ration
                session.pop('selected_article', None)
                logger.info("Post g√©n√©r√© avec succ√®s √† partir de l'article avec prompt personnalis√©")
                
            except Exception as e:
                draft = f"Erreur Gemini : {str(e)}"
                logger.error(f"Erreur lors de la g√©n√©ration du post: {str(e)}")
        else:
            # G√©n√©ration standard bas√©e sur un prompt optimis√© LinkedIn
            try:
                model = genai.GenerativeModel("gemini-2.0-flash")
                
                # R√©cup√©rer les int√©r√™ts et secteur de l'utilisateur
                interets = user.interets if user and user.interets else []
                secteur = user.secteur if user and user.secteur else "g√©n√©ral"
                
                # Construction du prompt selon le ton choisi
                if tone == "personnel":
                    tone_instruction = f"""
- **Ton personnel** : Partage une exp√©rience v√©cue ou une r√©flexion personnelle
- Base-toi sur ton secteur d'activit√© : {secteur}
- Int√®gre naturellement tes centres d'int√©r√™t : {', '.join(interets) if interets else 'd√©veloppement professionnel'}
- Utilise "je", "mon exp√©rience", "j'ai appris"
- Raconte une anecdote ou un apprentissage personnel"""
                
                elif tone == "professionnel":
                    tone_instruction = """
- **Ton professionnel** : D√©montre ton expertise et ta cr√©dibilit√©
- Utilise un vocabulaire technique et pr√©cis
- Adopte une approche analytique et factuelle
- Partage des insights m√©tier et des bonnes pratiques
- Position d'expert qui apporte de la valeur"""
                
                elif tone == "inspirant":
                    tone_instruction = """
- **Ton inspirant** : Motive et encourage ton audience
- Utilise des mots positifs et √©nergiques
- Partage une vision d'avenir ou des possibilit√©s
- Encourage l'action et le d√©passement de soi
- Ton optimiste qui donne envie d'agir"""
                
                else:  # conversationnel
                    tone_instruction = """
- **Ton conversationnel** : Cr√©e une discussion d√©tendue
- Utilise un langage courant et accessible
- Pose des questions directes √† ton audience
- Adopte un style familier mais professionnel
- Comme si tu parlais √† un coll√®gue"""
                
                # Prompt principal optimis√© LinkedIn
                optimized_prompt = f"""
Tu es un cr√©ateur de contenu LinkedIn expert. R√©dige un post viral sur : "{prompt}"

üéØ **STRUCTURE OBLIGATOIRE** :
1. **Hook** (1-2 lignes) : Accroche qui arr√™te le scroll
2. **Corps** (3-5 paragraphes courts) : D√©veloppement avec sauts de ligne
3. **CTA** (1 ligne) : Question qui pousse √† commenter
4. **Hashtags** (3-4) : Pertinents et populaires

üìù **CONSIGNES DE R√âDACTION** :
{tone_instruction}

‚úÖ **R√àGLES LINKEDIN** :
- Longueur : 800-1300 caract√®res maximum
- Paragraphes de 1-2 lignes avec espaces
- √âmojis strat√©giques (2-3 max)
- Aucun lien externe
- Style authentique et humain
- √âvite le jargon marketing

üöÄ **OBJECTIF** : Maximiser engagement (likes, commentaires, partages)

Commence directement par l'accroche, sans titre ni introduction.
"""
                
                response = model.generate_content(optimized_prompt)
                draft = response.text.strip()
                
            except Exception as e:
                draft = f"Erreur Gemini : {str(e)}"
                logger.error(f"Erreur lors de la g√©n√©ration standard: {str(e)}")

    session['draft'] = draft
    
    # Passer les variables suppl√©mentaires au template
    return render_template(
        "dashboard.html", 
        **session['profile'], 
        draft=draft,
        scheduled_posts=scheduled_posts,
        posts=user.posts if user else [],
        selected_article=selected_article,
        article_success=article_success
    )

# Import n√©cessaire pour les pauses entre requ√™tes
import time
def cleanup_old_cache_files():
    """Nettoie les fichiers de cache anciens pour lib√©rer l'espace"""
    try:
        if not os.path.exists(cache_dir):
            return
        
        now = datetime.now().timestamp()
        one_day_ago = now - 86400  # 24 heures
        
        for filename in os.listdir(cache_dir):
            file_path = os.path.join(cache_dir, filename)
            if os.path.isfile(file_path):
                file_modified_time = os.path.getmtime(file_path)
                if file_modified_time < one_day_ago:
                    os.remove(file_path)
                    logger.info(f"Cache nettoy√©: {filename}")
    
    except Exception as e:
        logger.error(f"Erreur lors du nettoyage du cache: {str(e)}")

# Appeler le nettoyage au d√©marrage de l'application
cleanup_old_cache_files()

def process_mentions_for_linkedin(content):
    """
    Convertit les mentions du format @[Nom](URL) au format LinkedIn
    pour l'API de publication LinkedIn
    
    Args:
        content (str): Contenu du post avec mentions
        
    Returns:
        tuple: (Texte format√© pour LinkedIn, Entit√©s de mention pour l'API)
    """
    import re
    
    # Regex pour d√©tecter les mentions
    mention_pattern = r'@\[(.*?)\]\((.*?)\)'
    mentions = re.findall(mention_pattern, content)
    
    # Si pas de mentions, retourner le contenu tel quel
    if not mentions:
        return content, []
    
    # Pr√©parer les entit√©s LinkedIn
    mention_entities = []
    
    # Pour chaque mention, cr√©er une entit√© LinkedIn
    for i, (name, url) in enumerate(mentions):
        # Extraire l'ID LinkedIn de l'URL
        linkedin_id = url.rstrip('/').split('/')[-1]
        
        # Cr√©er une entit√© de mention pour l'API LinkedIn
        mention_entity = {
            "entity": f"urn:li:person:{linkedin_id}",
            "textRange": {
                "start": 0,  # Sera mis √† jour plus tard
                "length": len(f"@{name}")
            }
        }
        
        mention_entities.append(mention_entity)
    
    # Remplacer les mentions par leur format textuel simple (@Nom)
    processed_content = content
    start_offset = 0
    
    for i, (name, url) in enumerate(mentions):
        mention_format = f"@[{name}]({url})"
        simple_format = f"@{name}"
        
        # Trouver la position actuelle dans le texte trait√©
        pos = processed_content.find(mention_format)
        if pos != -1:
            # Mettre √† jour la position de d√©but pour l'API LinkedIn
            mention_entities[i]["textRange"]["start"] = pos + start_offset
            
            # Remplacer la mention par sa version simple
            processed_content = processed_content.replace(mention_format, simple_format, 1)
            
            # Mettre √† jour le d√©calage pour les prochaines mentions
            start_offset += len(simple_format) - len(mention_format)
    
    return processed_content, mention_entities
    
@app.route("/publish", methods=["POST"])
def publish():
    access_token = session.get("access_token")
    if not access_token:
        return redirect(url_for("index"))

    content = request.form.get("post_content")
    date_str = request.form.get("publish_time")
    action = request.form.get("action")

    if not content:
        return "Aucun contenu re√ßu."

    try:
        publish_time = datetime.strptime(date_str, "%Y-%m-%dT%H:%M")
    except (ValueError, TypeError):
        publish_time = datetime.utcnow()

    now = datetime.utcnow()
    min_schedule_time = now + timedelta(minutes=30)

    profile = session.get('profile')
    sub = profile.get("sub", "")
    user_id = sub.split("_")[-1]
    urn = f"urn:li:person:{user_id}"
    user = User.query.filter_by(sub=sub).first()

    editing_post_id = session.get('editing_post_id')
    post_to_edit = Post.query.filter_by(id=editing_post_id, user_id=user.id).first() if editing_post_id else None

    if action == "save_draft":
        if post_to_edit:
            post_to_edit.content = content
            post_to_edit.published_at = now
            post_to_edit.scheduled = False
            post_to_edit.linkedin_post_urn = None
            db.session.commit()
        else:
            draft_post = Post(content=content, published_at=now, user_id=user.id, scheduled=False)
            db.session.add(draft_post)
            db.session.commit()

        session.pop('draft', None)
        session.pop('editing_post_id', None)
        return redirect(url_for("historique"))

    if action == "schedule":
        if publish_time < min_schedule_time:
            return "La date de programmation doit √™tre au moins 30 minutes dans le futur. <a href='/dashboard'>Retour</a>"

        if post_to_edit:
            post_to_edit.content = content
            post_to_edit.published_at = publish_time
            post_to_edit.scheduled = True
            post_to_edit.linkedin_post_urn = None
            db.session.commit()
        else:
            planned_post = Post(content=content, published_at=publish_time, user_id=user.id, scheduled=True)
            db.session.add(planned_post)
            db.session.commit()

        session.pop('draft', None)
        session.pop('editing_post_id', None)
        return redirect(url_for("historique"))

    if action == "publish_now":
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json",
            "X-Restli-Protocol-Version": "2.0.0"
        }
        processed_content, mention_entities = process_mentions_for_linkedin(content)
        media_assets = []

        # 1. D'ABORD : V√©rifier s'il y a un PDF (priorit√© absolue)
        pdf_file = request.files.get("pdf_file")
        has_pdf = pdf_file and pdf_file.filename.endswith(".pdf")
        
        if has_pdf:
            try:
                logger.info(f"üìÑ Traitement du PDF: {pdf_file.filename}")
                pdf_content = pdf_file.read()
                
                # Upload du PDF avec la nouvelle fonction
                pdf_document_urn = upload_pdf_to_linkedin(pdf_content, access_token, urn)
                
                if pdf_document_urn:
                    # Structure pour document LinkedIn
                    document_media = {
                        "status": "READY",
                        "document": pdf_document_urn,
                        "title": {
                            "text": pdf_file.filename
                        },
                        "description": {
                            "text": "Document partag√©"
                        }
                    }
                    
                    media_assets = [document_media]  # SEUL le PDF
                    share_media_category = "DOCUMENT"
                    
                    logger.info(f"‚úÖ PDF configur√© pour publication: {pdf_document_urn}")
                else:
                    logger.error(f"‚ùå √âchec de l'upload PDF")
                    return f"<h2>‚ùå Erreur lors de l'upload du PDF</h2><p><a href='/dashboard'>Retour</a></p>"
                    
            except Exception as e:
                logger.error(f"‚ùå Exception lors du traitement PDF: {str(e)}")
                return f"<h2>‚ùå Erreur PDF: {str(e)}</h2><p><a href='/dashboard'>Retour</a></p>"
        
        else:
            # 2. SINON : Traiter les images (si pas de PDF)
            
            # Images locales
            uploaded_files = request.files.getlist("images[]")
            max_images = min(len(uploaded_files), 9)
            for i in range(max_images):
                file = uploaded_files[i]
                if file and file.filename:
                    try:
                        asset = upload_image_to_linkedin(file.read(), access_token, urn, file.content_type)
                        if asset:
                            media_assets.append({
                                "status": "READY",
                                "media": asset,
                                "description": {"text": f"Image {i+1}"}
                            })
                            logger.info(f"Image locale {i+1} upload√©e avec succ√®s: {asset}")
                    except Exception as e:
                        logger.error(f"Exception lors de l'upload de l'image locale {i+1}: {str(e)}")

            # Photos Pexels
            pexels_photos = request.form.getlist("pexels_photos[]")
            for i, photo_data in enumerate(pexels_photos):
                if len(media_assets) >= 9:
                    break
                try:
                    photo_info = json.loads(photo_data)
                    photo_url = photo_info.get('src', {}).get('large', '')
                    if photo_url:
                        image_content = download_pexels_photo(photo_url)
                        if image_content:
                            asset = upload_image_to_linkedin(image_content, access_token, urn, 'image/jpeg')
                            if asset:
                                media_assets.append({
                                    "status": "READY",
                                    "media": asset,
                                    "description": {"text": f"Photo by {photo_info.get('photographer', 'Pexels')}"}
                                })
                                logger.info(f"Photo Pexels {i+1} upload√©e avec succ√®s: {asset}")
                except Exception as e:
                    logger.error(f"Exception lors de l'upload de la photo Pexels {i+1}: {str(e)}")

            share_media_category = "IMAGE" if media_assets else "NONE"

        # 3. Cr√©er le post avec la bonne cat√©gorie
        post_data = {
            "author": urn,
            "lifecycleState": "PUBLISHED",
            "specificContent": {
                "com.linkedin.ugc.ShareContent": {
                    "shareCommentary": {"text": processed_content},
                    "shareMediaCategory": share_media_category,
                    "media": media_assets
                }
            },
            "visibility": {
                "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
            }
        }

        if mention_entities:
            post_data["specificContent"]["com.linkedin.ugc.ShareContent"]["mentions"] = mention_entities

        # 4. Publication
        logger.info(f"üì§ Publication avec {share_media_category}: {len(media_assets)} m√©dia(s)")
        logger.info(f"üì§ Donn√©es post: {json.dumps(post_data, indent=2)}")
        
        post_resp = requests.post(LINKEDIN_POSTS_URL, headers=headers, json=post_data)
        
        if post_resp.status_code == 201:
            linkedin_urn = post_resp.json().get("id")
            logger.info(f"‚úÖ Post publi√© avec succ√®s: {linkedin_urn}")

            if post_to_edit:
                post_to_edit.content = content
                post_to_edit.published_at = now
                post_to_edit.scheduled = False
                post_to_edit.linkedin_post_urn = linkedin_urn
                db.session.commit()
            else:
                published_post = Post(content=content, published_at=now, user_id=user.id, scheduled=False, linkedin_post_urn=linkedin_urn)
                db.session.add(published_post)
                db.session.commit()

            session.pop('draft', None)
            session.pop('editing_post_id', None)
            return redirect(url_for("historique"))
        else:
            logger.error(f"‚ùå Erreur publication: {post_resp.status_code} - {post_resp.text}")
            return f"<h2>‚ùå Erreur lors de la publication :</h2><pre>{post_resp.text}</pre><p><a href='/dashboard'>Retour</a></p>"

            
@app.route("/edit_post/<int:post_id>", methods=["GET", "POST"])
def edit_post(post_id):
    if 'profile' not in session:
        return redirect(url_for("index"))

    # R√©cup√©rer l'utilisateur et le post
    user = User.query.filter_by(sub=session['profile'].get("sub", "")).first()
    if not user:
        flash("Utilisateur introuvable", "error")
        return redirect(url_for("historique"))

    post = Post.query.filter_by(id=post_id, user_id=user.id).first()
    if not post:
        flash("Post introuvable ou vous n'avez pas les droits", "error")
        return redirect(url_for("historique"))

    # Traitement POST
    if request.method == "POST":
        # DEBUG COMPLET des donn√©es re√ßues
        logger.info(f"üîç === DEBUG EDIT POST {post_id} ===")
        logger.info(f"üìã request.method: {request.method}")
        logger.info(f"üìã request.form: {dict(request.form)}")
        logger.info(f"üìã request.files: {dict(request.files)}")
        
        try:
            # R√©cup√©rer les donn√©es du formulaire avec debug
            new_content = request.form.get("post_content", "").strip()
            new_date_str = request.form.get("publish_time", "")
            action = request.form.get("action", "AUCUNE_ACTION_DETECTEE")
            
            logger.info(f"üìù Contenu: {len(new_content)} caract√®res")
            logger.info(f"üìÖ Date: {new_date_str}")
            logger.info(f"üéØ ACTION DETECTEE: '{action}'")
            
            # Validation du contenu
            if not new_content:
                logger.warning("‚ùå Contenu vide d√©tect√©")
                flash("Le contenu du post ne peut pas √™tre vide", "error")
                return render_template("edit_post.html", 
                                     post=post, 
                                     formatted_date=post.published_at.strftime("%Y-%m-%dT%H:%M") if post.published_at else "",
                                     **session.get('profile', {}))
            
            # Traitement de la date
            publish_time = None
            if new_date_str:
                try:
                    publish_time = datetime.strptime(new_date_str, "%Y-%m-%dT%H:%M")
                    logger.info(f"üìÖ Date pars√©e: {publish_time}")
                except (ValueError, TypeError) as e:
                    logger.error(f"‚ùå Erreur parsing date: {e}")
                    publish_time = datetime.utcnow()
            else:
                publish_time = datetime.utcnow()
                logger.info(f"üìÖ Date par d√©faut: {publish_time}")
            
            # Sauvegarder l'√©tat AVANT modification
            old_scheduled = post.scheduled
            old_urn = post.linkedin_post_urn
            old_date = post.published_at
            
            logger.info(f"üìä AVANT: scheduled={old_scheduled}, urn={'OUI' if old_urn else 'NON'}, date={old_date}")
            
            # Mettre √† jour le contenu
            post.content = new_content
            
            # TRAITEMENT DES ACTIONS avec debug ultra-d√©taill√©
            if action == "save_draft":
                logger.info("üîÑ TRAITEMENT ACTION: save_draft")
                post.scheduled = False
                post.published_at = datetime.utcnow()
                post.linkedin_post_urn = None
                logger.info(f"üìù Post {post_id} ‚Üí BROUILLON: scheduled=False, urn=None")
                flash("Post sauvegard√© en brouillon avec succ√®s", "success")
                
            elif action == "schedule":
                logger.info("üîÑ TRAITEMENT ACTION: schedule")
                now = datetime.utcnow()
                min_schedule_time = now + timedelta(minutes=30)
                
                logger.info(f"‚è∞ V√©rification date: {publish_time} vs {min_schedule_time}")
                
                if publish_time < min_schedule_time:
                    logger.warning(f"‚ùå Date trop proche: {publish_time} < {min_schedule_time}")
                    flash("La date de programmation doit √™tre au moins 30 minutes dans le futur", "error")
                    return render_template("edit_post.html", 
                                         post=post, 
                                         formatted_date=new_date_str,
                                         **session.get('profile', {}))
                
                post.scheduled = True
                post.published_at = publish_time
                post.linkedin_post_urn = None
                logger.info(f"‚è∞ Post {post_id} ‚Üí PROGRAMM√â: scheduled=True, date={publish_time}, urn=None")
                flash(f"Post programm√© pour le {publish_time.strftime('%d/%m/%Y √† %H:%M')}", "success")
                
            elif action == "publish_now":
                logger.info("üîÑ TRAITEMENT ACTION: publish_now")
                access_token = session.get("access_token")
                if not access_token:
                    logger.error("‚ùå Aucun token d'acc√®s LinkedIn")
                    flash("Token LinkedIn expir√©. Veuillez vous reconnecter", "error")
                    return redirect(url_for("linkedin_auth"))
                
                # Tenter la publication sur LinkedIn
                logger.info("üöÄ Tentative de publication sur LinkedIn...")
                
                profile = session.get('profile')
                sub = profile.get("sub", "")
                user_id = sub.split("_")[-1] if "_" in sub else sub.replace("urn:li:person:", "")
                urn = f"urn:li:person:{user_id}"
                
                logger.info(f"üì§ URN utilisateur: {urn}")
                
                headers = {
                    "Authorization": f"Bearer {access_token}",
                    "Content-Type": "application/json",
                    "X-Restli-Protocol-Version": "2.0.0"
                }
                
                # Publication simple sans images pour d√©boguer
                post_data = {
                    "author": urn,
                    "lifecycleState": "PUBLISHED",
                    "specificContent": {
                        "com.linkedin.ugc.ShareContent": {
                            "shareCommentary": {"text": new_content},
                            "shareMediaCategory": "NONE",
                            "media": []
                        }
                    },
                    "visibility": {
                        "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
                    }
                }
                
                logger.info(f"üì§ Donn√©es post: {json.dumps(post_data, indent=2)}")
                
                try:
                    post_resp = requests.post(LINKEDIN_POSTS_URL, headers=headers, json=post_data, timeout=30)
                    logger.info(f"üì§ R√©ponse LinkedIn: {post_resp.status_code}")
                    logger.info(f"üì§ Contenu r√©ponse: {post_resp.text}")
                    
                    if post_resp.status_code == 201:
                        linkedin_urn = post_resp.json().get("id")
                        post.linkedin_post_urn = linkedin_urn
                        post.scheduled = False
                        post.published_at = datetime.utcnow()
                        logger.info(f"‚úÖ Post {post_id} ‚Üí PUBLI√â: urn={linkedin_urn}")
                        flash("Post publi√© avec succ√®s sur LinkedIn !", "success")
                    else:
                        logger.error(f"‚ùå Erreur publication LinkedIn: {post_resp.status_code} - {post_resp.text}")
                        flash(f"Erreur LinkedIn ({post_resp.status_code}). R√©essayez plus tard.", "error")
                        return render_template("edit_post.html", 
                                             post=post, 
                                             formatted_date=new_date_str,
                                             **session.get('profile', {}))
                
                except requests.exceptions.RequestException as e:
                    logger.error(f"‚ùå Exception r√©seau LinkedIn: {str(e)}")
                    flash("Erreur de connexion avec LinkedIn. V√©rifiez votre connexion internet.", "error")
                    return render_template("edit_post.html", 
                                         post=post, 
                                         formatted_date=new_date_str,
                                         **session.get('profile', {}))
            else:
                logger.error(f"‚ùå ACTION INCONNUE: '{action}'")
                flash(f"Action inconnue: {action}", "error")
                return render_template("edit_post.html", 
                                     post=post, 
                                     formatted_date=new_date_str,
                                     **session.get('profile', {}))
            
            # Sauvegarder l'√©tat APR√àS modification
            logger.info(f"üìä APR√àS: scheduled={post.scheduled}, urn={'OUI' if post.linkedin_post_urn else 'NON'}, date={post.published_at}")
            
            # SAUVEGARDE FORC√âE
            try:
                logger.info("üíæ D√©but sauvegarde en base...")
                db.session.flush()
                db.session.commit()
                logger.info(f"‚úÖ Post {post_id} sauvegard√© avec succ√®s")
                
                # V√©rification post-sauvegarde
                db.session.refresh(post)
                logger.info(f"üîç V√âRIFICATION: scheduled={post.scheduled}, urn={'OUI' if post.linkedin_post_urn else 'NON'}")
                
            except Exception as db_error:
                db.session.rollback()
                logger.error(f"‚ùå Erreur base de donn√©es: {str(db_error)}")
                flash("Erreur de sauvegarde en base de donn√©es", "error")
                return render_template("edit_post.html", 
                                     post=post, 
                                     formatted_date=new_date_str,
                                     **session.get('profile', {}))
            
            # Nettoyer la session
            session.pop('draft', None)
            session.pop('editing_post_id', None)
            
            logger.info(f"üéØ REDIRECT vers historique pour voir le r√©sultat")
            
            # Redirection
            return redirect(url_for("historique"))
                
        except Exception as e:
            db.session.rollback()
            logger.error(f"‚ùå Erreur g√©n√©rale modification post {post_id}: {str(e)}")
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            flash("Une erreur inattendue est survenue", "error")
    
    # Affichage en GET
    formatted_date = post.published_at.strftime("%Y-%m-%dT%H:%M") if post.published_at else ""
    
    session['draft'] = post.content
    session['editing_post_id'] = post.id
    
    return render_template(
        "edit_post.html", 
        post=post, 
        formatted_date=formatted_date, 
        draft=post.content,
        **session.get('profile', {})
    )

# Route de test pour d√©boguer les donn√©es de formulaire
@app.route("/test_form_data", methods=["POST"])
def test_form_data():
    """Route de test pour voir exactement ce qui est envoy√© par le formulaire"""
    logger.info("üß™ === TEST FORM DATA ===")
    logger.info(f"üìã request.method: {request.method}")
    logger.info(f"üìã request.form: {dict(request.form)}")
    logger.info(f"üìã request.files: {dict(request.files)}")
    logger.info(f"üìã request.json: {request.json}")
    logger.info(f"üìã request.data: {request.data}")
    
    return f"""
    <h1>Test Form Data</h1>
    <p>Method: {request.method}</p>
    <p>Form: {dict(request.form)}</p>
    <p>Files: {dict(request.files)}</p>
    <p><a href="javascript:history.back()">‚Üê Retour</a></p>
    """
    
@app.route("/delete_post/<int:post_id>")
def delete_post(post_id):
    if 'profile' not in session:
        return redirect(url_for("index"))

    user = User.query.filter_by(sub=session['profile'].get("sub", "")).first()
    if not user:
        flash("Utilisateur introuvable", "error")
        return redirect(url_for("historique"))

    post = Post.query.filter_by(id=post_id, user_id=user.id).first()
    if not post:
        flash("Post introuvable ou vous n'avez pas les droits", "error")
        return redirect(url_for("historique"))

    try:
        db.session.delete(post)
        db.session.commit()
        flash("Post supprim√© avec succ√®s", "success")
        logger.info(f"Post {post_id} supprim√© par l'utilisateur {user.id}")
    except Exception as e:
        db.session.rollback()
        logger.error(f"Erreur lors de la suppression du post {post_id}: {str(e)}")
        flash("Erreur lors de la suppression du post", "error")

    return redirect(url_for("historique"))

@app.route("/profil", methods=["GET", "POST"])
def profil():
    if 'profile' not in session:
        return redirect(url_for("index"))

    profile = session['profile']
    user = User.query.filter_by(sub=profile.get("sub", "")).first()

    if request.method == "POST":
        secteur = request.form.get("secteur")
        interets = request.form.getlist("interets")

        if user:
            user.secteur = secteur
            user.interets = interets
            db.session.commit()

        profile['secteur'] = secteur
        profile['interets'] = interets
        session['profile'] = profile

    else:
        if user:
            profile['secteur'] = user.secteur
            profile['interets'] = user.interets or []
            session['profile'] = profile

    return render_template("profil.html", user=session['profile'])

@app.route("/historique")
def historique():
    if 'profile' not in session:
        return redirect(url_for("index"))

    sub = session["profile"].get("sub", "")
    user = User.query.filter_by(sub=sub).first()

    if not user:
        return "<p>Utilisateur introuvable en base.</p>"

    # Force refresh de la session SQLAlchemy
    db.session.expire_all()
    
    now = datetime.utcnow()
    posts = Post.query.filter_by(user_id=user.id).order_by(Post.published_at.desc()).all()
    
    logger.info(f"üîç === DEBUG HISTORIQUE utilisateur {user.id} ===")
    logger.info(f"üìä Total posts: {len(posts)}")
    logger.info(f"üïê Heure actuelle: {now}")
    
    # Classification avec debug ultra-d√©taill√©
    published_posts = []
    scheduled_posts = []
    draft_posts = []
    
    for post in posts:
        has_urn = bool(post.linkedin_post_urn)
        is_scheduled = bool(post.scheduled)
        future_date = post.published_at and post.published_at > now
        
        logger.info(f"üìÑ Post {post.id}:")
        logger.info(f"   ‚îú‚îÄ scheduled: {is_scheduled}")
        logger.info(f"   ‚îú‚îÄ urn: {'‚úÖ' if has_urn else '‚ùå'}")
        logger.info(f"   ‚îú‚îÄ date: {post.published_at}")
        logger.info(f"   ‚îî‚îÄ date future: {'‚úÖ' if future_date else '‚ùå'}")
        
        if has_urn:
            published_posts.append(post)
            logger.info(f"   ‚Üí üì± PUBLI√â")
        elif is_scheduled and future_date:
            scheduled_posts.append(post)
            logger.info(f"   ‚Üí ‚è∞ PROGRAMM√â")
        else:
            draft_posts.append(post)
            logger.info(f"   ‚Üí üìù BROUILLON")
    
    logger.info(f"üìà R√âSULTAT: {len(draft_posts)} brouillons, {len(scheduled_posts)} programm√©s, {len(published_posts)} publi√©s")
    
    return render_template("historique.html", 
                         draft_posts=draft_posts, 
                         scheduled_posts=scheduled_posts, 
                         published_posts=published_posts)

@app.route("/debug_posts")
def debug_posts():
    """Route de diagnostic pour v√©rifier l'√©tat des posts"""
    if 'profile' not in session:
        return "Non connect√©"
    
    user = User.query.filter_by(sub=session['profile'].get("sub", "")).first()
    if not user:
        return "Utilisateur introuvable"
    
    posts = Post.query.filter_by(user_id=user.id).all()
    
    debug_html = f"""
    <h1>üîç Debug Posts Utilisateur {user.id}</h1>
    <p>Total: {len(posts)} posts</p>
    <table border="1" style="border-collapse: collapse; width: 100%;">
    <tr>
        <th>ID</th>
        <th>Scheduled</th>
        <th>URN LinkedIn</th>
        <th>Date</th>
        <th>Contenu (50 chars)</th>
        <th>Classification</th>
    </tr>
    """
    
    now = datetime.utcnow()
    
    for post in posts:
        has_urn = bool(post.linkedin_post_urn)
        is_scheduled = bool(post.scheduled)
        future_date = post.published_at and post.published_at > now
        
        if has_urn:
            classification = "PUBLI√â"
            color = "#4CAF50"
        elif is_scheduled and future_date:
            classification = "PROGRAMM√â"
            color = "#2196F3"
        else:
            classification = "BROUILLON"
            color = "#FF9800"
        
        debug_html += f"""
        <tr style="background-color: {color}20;">
            <td>{post.id}</td>
            <td>{'‚úÖ' if is_scheduled else '‚ùå'}</td>
            <td>{'‚úÖ' if has_urn else '‚ùå'}</td>
            <td>{post.published_at}</td>
            <td>{(post.content or '')[:50]}...</td>
            <td style="font-weight: bold;">{classification}</td>
        </tr>
        """
    
    debug_html += """
    </table>
    <p><a href="/historique">‚Üê Retour historique</a></p>
    """
    
    return debug_html

@app.route("/parametres")
def parametres():
    if 'profile' not in session:
        return redirect(url_for("index"))
    return render_template("parametres.html", user=session['profile'])

@app.route("/calendar")
def calendar():
    if 'profile' not in session:
        return redirect(url_for("index"))

    user = User.query.filter_by(sub=session['profile']['sub']).first()
    if not user:
        return "Utilisateur introuvable"

    # CRITIQUE : Forcer une nouvelle requ√™te sans cache
    db.session.expire_all()
    
    now = datetime.utcnow()
    # Posts programm√©s avec debug
    upcoming_posts = Post.query.filter_by(user_id=user.id, scheduled=True).filter(
        Post.linkedin_post_urn.is_(None),
        Post.published_at > now
    ).order_by(Post.published_at).all()
    
    logger.info(f"=== DEBUG CALENDAR pour utilisateur {user.id} ===")
    logger.info(f"Posts programm√©s trouv√©s: {len(upcoming_posts)}")
    for post in upcoming_posts:
        logger.info(f"Post {post.id}: date={post.published_at}, scheduled={post.scheduled}")

    return render_template("calendar.html", posts=upcoming_posts, now=now)

@app.route("/publish_scheduled")
def publish_scheduled():
    """Publication automatique des posts programm√©s - VERSION CORRIG√âE"""
    now = datetime.utcnow()
    
    # R√©cup√©rer TOUS les posts programm√©s dont l'heure est arriv√©e
    posts_to_publish = Post.query.filter(
        Post.scheduled == True, 
        Post.published_at <= now,
        Post.linkedin_post_urn.is_(None)  # Seulement ceux pas encore publi√©s
    ).all()

    count = 0
    errors = []
    
    logger.info(f"üîÑ V√©rification auto-publication: {len(posts_to_publish)} post(s) √† traiter")
    
    for post in posts_to_publish:
        try:
            user = User.query.get(post.user_id)
            if not user:
                logger.warning(f"‚ùå Utilisateur introuvable pour le post {post.id}")
                continue

            # PROBL√àME PRINCIPAL : Il faut le token d'acc√®s de chaque utilisateur
            # La publication automatique ne peut pas fonctionner sans les tokens individuels
            # Pour l'instant, on marque simplement le post comme "pr√™t √† publier manuellement"
            
            logger.info(f"üìÖ Post {post.id} pr√™t pour publication manuelle")
            # On ne modifie rien - l'utilisateur devra publier manuellement
            
        except Exception as e:
            error_msg = f"Erreur post {post.id}: {str(e)}"
            logger.error(error_msg)
            errors.append(error_msg)

    if errors:
        logger.error(f"‚ùå Erreurs lors de la v√©rification: {'; '.join(errors)}")
    
    return f"‚úÖ V√©rification termin√©e. {len(posts_to_publish)} post(s) pr√™t(s) pour publication manuelle."



@app.errorhandler(500)
def handle_500(e):
    logger.error(f"Erreur 500: {str(e)}")
    
    # En mode d√©veloppement, afficher des d√©tails
    if app.debug:
        return f"""
        <h1>Erreur 500</h1>
        <p>Une erreur est survenue sur le serveur.</p>
        <h2>D√©tails</h2>
        <pre>{str(e)}</pre>
        <p><a href="/">Retour √† l'accueil</a></p>
        """, 500
    
    # En production, message g√©n√©rique
    return """
    <h1>Erreur 500</h1>
    <p>Une erreur est survenue sur le serveur. L'√©quipe technique a √©t√© inform√©e.</p>
    <p><a href="/">Retour √† l'accueil</a></p>
    """, 500

# Ajout d'une route de test pour v√©rifier la connexion √† la base de donn√©es
@app.route("/test-db")
def test_db():
    try:
        # V√©rifier les tables existantes
        inspector = inspect(db.engine)
        tables = inspector.get_table_names()
        
        # Compter les utilisateurs
        user_count = User.query.count()
        
        # Compter les posts
        post_count = Post.query.count()
        
        return f"""
        <h1>Test de la base de donn√©es</h1>
        <p>‚úÖ Connexion √† la base de donn√©es r√©ussie</p>
        <h2>Tables existantes:</h2>
        <ul>{''.join([f'<li>{table}</li>' for table in tables])}</ul>
        <p>Nombre d'utilisateurs: {user_count}</p>
        <p>Nombre de posts: {post_count}</p>
        <p><a href="/">Retour √† l'accueil</a></p>
        """
    except Exception as e:
        return f"""
        <h1>Erreur de test de la base de donn√©es</h1>
        <p>‚ùå La connexion √† la base de donn√©es a √©chou√©:</p>
        <pre>{str(e)}</pre>
        <p><a href="/">Retour √† l'accueil</a></p>
        """, 500
        
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
