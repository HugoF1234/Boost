# üéØ √âTAPES POUR D√âPLOYER SUR RENDER

# 1. MODIFIER requirements.txt (ajouter ces d√©pendances)
Flask==2.3.3
Flask-SQLAlchemy==3.1.1
requests==2.31.0
google-generativeai==0.3.2
psycopg2-binary==2.9.9
gunicorn==21.2.0
SQLAlchemy==2.0.23
Werkzeug==2.3.7  # üëà IMPORTANT pour les mots de passe
urllib3==2.0.7
python-dotenv==1.0.0
Jinja2==3.1.3
itsdangerous==2.1.2
click==8.1.7
MarkupSafe==2.1.3

# 2. MODIFIER app.py (ajouter ces imports en haut)
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps
import re
from datetime import datetime, timedelta

# 3. MODIFIER la fonction init_db() dans app.py
def init_db():
    """Initialiser la base de donn√©es avec les tables n√©cessaires"""
    with app.app_context():
        try:
            # V√©rifier les tables existantes avant la cr√©ation
            inspector = inspect(db.engine)
            existing_tables = inspector.get_table_names()
            logger.info(f"Tables existantes avant cr√©ation: {existing_tables}")
            
            # Cr√©er les tables si elles n'existent pas
            db.create_all()
            logger.info("Tables cr√©√©es ou v√©rifi√©es avec succ√®s")
            
            # üî• NOUVEAU : Cr√©er un utilisateur admin par d√©faut sur Render
            if os.getenv("RENDER"):
                create_default_admin()
            
            # V√©rifier les tables apr√®s cr√©ation
            existing_tables = inspector.get_table_names()
            logger.info(f"Tables existantes apr√®s cr√©ation: {existing_tables}")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'initialisation de la base de donn√©es: {str(e)}")
            raise

# 4. AJOUTER cette fonction dans app.py
def create_default_admin():
    """Cr√©er un utilisateur admin par d√©faut sur Render"""
    try:
        # V√©rifier si un admin existe d√©j√†
        admin_user = LocalUser.query.filter_by(email="admin@linkedboost.com").first()
        
        if not admin_user:
            admin_user = LocalUser(
                email="admin@linkedboost.com",
                first_name="Admin",
                last_name="LinkedBoost",
                company="LinkedBoost",
                job_title="Administrateur",
                is_verified=True
            )
            admin_user.set_password("AdminLinkedBoost2025!")
            
            db.session.add(admin_user)
            db.session.commit()
            
            logger.info("‚úÖ Utilisateur admin cr√©√© sur Render")
            logger.info("üìß Email: admin@linkedboost.com")
            logger.info("üîê Password: AdminLinkedBoost2025!")
        else:
            logger.info("‚ÑπÔ∏è Utilisateur admin d√©j√† existant")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de l'admin: {str(e)}")

# 5. MODIFIER votre render.yaml
services:
  - type: web
    name: linkedin-boost
    env: python
    region: frankfurt
    plan: free
    buildCommand: "pip install -r requirements.txt"
    startCommand: "gunicorn app:app"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: linkedboost-db
          property: connectionString
      - key: RENDER
        value: "true"  # üëà Pour d√©tecter l'environnement Render
      - key: FLASK_ENV
        value: "production"
      - key: FLASK_DEBUG
        value: "0"
      - key: LINKEDIN_CLIENT_ID
        value: 86occjps58doir
      - key: LINKEDIN_CLIENT_SECRET
        value: WPL_AP1.C8C6uXjTbpJyQUx2.Y7COPg==
      - key: LINKEDIN_REDIRECT_URI
        value: https://linkedinboost.onrender.com/callback
      - key: GEMINI_API_KEY
        value: AIzaSyB434P__wR_o_rr5Q3PjOULqyKhMANRtgk

databases:
  - name: linkedboost-db
    databaseName: boostdb_taut
    user: boostdb_taut_user
    region: frankfurt
    plan: free
